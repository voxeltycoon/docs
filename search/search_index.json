{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome!","text":"<p>This is the official modding documentation for Voxel Tycoon \u2014 a tycoon strategy game about transportation, factories, and mining infinite voxel landscapes.</p> <p>Work in progress</p> <p>The documentation is obviously work in progress. Please feel free to contribute!</p>"},{"location":"#getting-started","title":"Getting started","text":"<p>This section contains official and community guides helping you to get started with different aspects of Voxel Tycoon modding.</p> <p>Explore the guides \u2794</p>"},{"location":"#assets","title":"Assets","text":"<p>List of all asset types supported by the game (work in progress).</p> <p>Explore the asset reference \u2794</p>"},{"location":"#scripting-reference","title":"Scripting reference","text":"<p>List of Voxel Tycoon scripting APIs (work in progress).</p> <p>Explore the scripting reference \u2794</p>"},{"location":"#other-resources","title":"Other resources","text":"<ul> <li>Discord Server (look for the <code>#modding</code> channel)</li> <li>Suggestion tracker</li> <li>Bug tracker</li> <li>Voxel Tycoon changelog</li> <li>Samples source code</li> <li>Official website</li> </ul>"},{"location":"assets/","title":"Introduction","text":"<p>Assets are content and configuration files to be processed by the game.</p>"},{"location":"assets/#assets-reference-work-in-progress","title":"Assets reference (work in progress)","text":"Asset Description .dll Scripting mod library .patch Allows to apply changes to assets located in other mods"},{"location":"assets/dll-asset/","title":".dll asset","text":""},{"location":"assets/dll-asset/#description","title":"Description","text":"<p>Since 0.79 you can create not only content-based mods but also mods that provide new behaviors and logic, or modify already existent ones. We call them script mods.</p>"},{"location":"assets/dll-asset/#how-it-works","title":"How it works","text":"<p><code>.dll</code> asset is treated by the game as any other mod asset, so when you place it in your mod folder, the game will find and load it. However, the process of creating the DLL file itself differs greatly from the other assets.</p>"},{"location":"assets/dll-asset/#core-concepts","title":"Core concepts","text":"<ul> <li>The DLL file you want to get in the end essentially is a .NET class library targeting .NET Standard 2.1 (or .NET 4.x) and containing one or more implementations of the <code>Mod</code> interface provided by Voxel Tycoon API.</li> <li>In order to access Voxel Tycoon and Unity APIs you need to reference <code>VoxelTycoon.dll</code> and <code>UnityEngine.CoreModule.dll</code> libraries that can be found in <code>VoxelTycoon_Data/Managed</code> directory inside the game folder.</li> <li>Also, you might want to reference <code>UnityEngine.UI.dll</code> if you want to work with the game UI.</li> <li>After you compile your library, the resulted .dll file is ready to be put into your mod directory and loaded by the game.</li> </ul>"},{"location":"assets/dll-asset/#step-by-step-tutorial","title":"Step-by-step tutorial","text":"<p>In order to help you start working with the concepts described above, we compiled a simple step-by-step tutorial which will guide you through the process of creating your first script mod for Voxel Tycoon.</p>"},{"location":"assets/dll-asset/#faq","title":"FAQ","text":""},{"location":"assets/dll-asset/#what-can-be-done-with-the-script-mods","title":"What can be done with the script mods?","text":"<p>Voxel Tycoon works on top of Unity, and script mods have full access to all the features that Unity runtime provides, as well as Voxel Tycoon APIs. In other words, you can do anything that you can normally do with Unity runtime at least.</p>"},{"location":"assets/dll-asset/#in-what-language-mods-can-be-written","title":"In what language mods can be written?","text":"<p>Since the game is written in C# and works on top of Unity (which primary language is also C#), most examples, tutorials, and docs you may find will use this language. That being said, C# recommended language of choice for the script mods. C# is a modern, constantly evolving language that provides a huge variety of features and flexibility.</p> <p>However, any .NET language will work.</p>"},{"location":"assets/dll-asset/#wheres-api-documentation","title":"Where's API documentation?","text":"<p>The documentation for Voxel Tycoon API is being created here. Still, we urge you to start creating script mods right now, so we can build an extendable, flexible, and well-featured platform together with you.</p> <p>Just as you feel that you need any new APIs, events, callbacks, etc - or modifications of existing ones - do not hesitate to let us know by creating an issue on suggestion tracker. Also, feel free to chat with us and community directly on our Discord Server.</p> <p>We are committed to update and extend the modding APIs along with your requests as soon as possible.</p> <p>Meanwhile, we suggest you to use decompilers such as dnSpy or JetBrains dotPeek to dig into the game's code and start exploring the possibilities for modification. Also, we've hosted a repository with the source code of our official mods and samples.</p>"},{"location":"assets/patch-asset/","title":".patch asset","text":""},{"location":"assets/patch-asset/#description","title":"Description","text":"<p>This type of asset allows you to apply changes to assets located in any other mod, including the base game content.</p>"},{"location":"assets/patch-asset/#how-it-works","title":"How it works","text":"<p>Every <code>.patch</code> asset consists of a list of commands.</p> <p>Each command defines which operation should be applied to what asset, and also specifies arguments specific to that command.</p> <p>An example patch that adds custom made peyotes to the desert biome from the base game:</p> <pre><code>{\n    \"Commands\": [\n        {\n            \"Command\": \"Add\",\n            \"TargetAssetUri\": \"base/desert.biome\",\n            \"Path\": \"Plants\",\n            \"Values\": [\n                {\n                    \"Uri\": \"plants-o-plenty/peyote.plant\",\n                    \"Probability\": 0.02\n                }\n            ]\n        }\n    ]\n}\n</code></pre>"},{"location":"assets/patch-asset/#available-commands","title":"Available commands","text":""},{"location":"assets/patch-asset/#add","title":"Add","text":"<p>Adds provided values to a collection at the path.</p> Argument Description TargetAssetUri : string The URI of the target asset. Path : string JsonPath to a collection (or collections) where values should be added. Values : array Values to add."},{"location":"assets/patch-asset/#set","title":"Set","text":"<p>Sets provided value to a property at the path.</p> Argument Description TargetAssetUri : string The URI of the target asset. Path : string JsonPath to a property (or properties) which value should be set. Value : any Value to be set."},{"location":"assets/patch-asset/#remove","title":"Remove","text":"<p>Removes value at the path.</p> Argument Description TargetAssetUri : string The URI of the target asset. Path : string JsonPath to a value (or values) which should be removed."},{"location":"assets/patch-asset/#merge","title":"Merge","text":"<p>Merges provided object with an object at the path (as described here).</p> Argument Description TargetAssetUri : string The URI of the target asset. Path : string JsonPath to an object (or objects) where provided object should be merged. Value : object Object to be merged. ArrayHandling : string One of the values described here.Optional (default: <code>\"Concat\"</code>) NullValueHandling : string One of the values described here.Optional (default: <code>\"Merge\"</code>)"},{"location":"assets/patch-asset/#optional-flag","title":"Optional flag","text":"<p>Sometimes, you might want to alter assets which presence is not known in advance. Luckily, since 0.78, each command supports the new <code>Optional</code> flag. When set to <code>true</code>, in case the target asset was not found, a command will be just skipped without failing.</p>"},{"location":"assets/patch-asset/#debugging","title":"Debugging","text":"<p>You can actually see how target assets look after all patches are applied to them. To do so, open the Settings window while holding SHIFT, then navigate to Misc tab and toggle Write patched assets setting (at the bottom).</p> <p>Now, every time you load or start a new game with your mod enabled, the game will write target assets in their final form (with all patches applied) to <code>&lt;original_filename&gt;.patched.json</code>.</p> <p>Don't forget to remove those files before publishing your mod, and disable this option after debugging is completed to avoid the additional performance cost.</p>"},{"location":"assets/patch-asset/#advanced-path-examples","title":"Advanced path examples","text":"<p>Pro Tip</p> <p>You can use online JSONPath evaluators like https://jsonpath.com/ to test complex pathes.</p> <p>Find a property of an object in an array by index:</p> <p><code>ItemsPerDay[0].CountMultiplier</code></p> <p>Find a property of all objects in an array:</p> <p><code>ItemsPerDay[*].CountMultiplier</code></p> <p>Find a property of an object in an array which has specific property value:</p> <p><code>ItemsPerDay[?(@.Uri=='base/tv.item')].CountMultiplier</code></p> <p><code>ItemsPerDay[?(@.CountMultiplier&gt;0.5)].CountMultiplier</code></p>"},{"location":"guides/basics/","title":"Introduction","text":"<p>There're two ways to mod Voxel Tycoon experience:</p>"},{"location":"guides/basics/#content-mods","title":"Content mods","text":"<p>Content mod is a set of configuration files, models, and other content which is processed by the game.</p> <p>The game should know how to process these files, so content mods always use already existing behaviours and mechanics provided by the game.</p> <p>Getting started with content mods \u2794</p>"},{"location":"guides/basics/#script-mods","title":"Script mods","text":"<p>Script mod is a full-featured program. Contrary to content mods, you can create new behaviours and mechanics with script mods, as well as extending or modifing existing ones.</p> <p>Getting started with script mods \u2794</p>"},{"location":"guides/basics/asset-uri/","title":"Asset URI","text":"<p>Asset URI is a unique identifier of the asset. It, in particular, used to reference one asset from another.</p> <p>URIs are automatically inferred from mod pack directory and asset file names.</p>"},{"location":"guides/basics/asset-uri/#structure","title":"Structure","text":"<p>It always has the next structure: <code>&lt;modpack&gt;/&lt;asset_name&gt;.&lt;asset_extension&gt;</code>.</p> <p>For example, <code>base/tree.plant</code>, <code>your_first_mod/house_2.obj</code>, or <code>base/desert.biome</code>.</p>"},{"location":"guides/basics/asset-uri/#file-hierarchy","title":"File hierarchy","text":"<p>The actual file hierarchy in a mod pack has no effect on the produced URI. Eg. it doesn't matter if target asset is located at <code>Content/base/desert.biome</code> or <code>Content/base/biomes/desert.biome</code>, the result URI will be the same: <code>base/desert.biome</code>.</p> <p>This effectively means that you can't have two assets with the same file names in one mod pack.</p> <p>URIs are always lowercased</p> <p>Even if the target asset has a non-lowercased name (eg. TeslaModelS3.spaceship in mod pack ElonMusk) its URI still will be <code>elonmusk/teslamodels3.spaceship</code>. <code>ElonMusk/TeslaModelS3.spaceship</code> URI will not work.</p>"},{"location":"guides/basics/dependencies/","title":"Mod dependencies","text":"<p>If your mod depends on some other mod or mods, you can explicity state it. This will serve two purposes:</p> <ul> <li>When a player subscribes to your mod, Steam will suggest to subscribe to other mods which your mod depends on</li> <li>The game will ensure that those mods are loaded prior your mod</li> </ul>"},{"location":"guides/basics/dependencies/#setting-up-dependcies","title":"Setting up dependcies","text":"<p>Use Steam Workshop Dashboard to set up dependencies. Go to your item page, and click Add/Remove Required Items under the Owner Controls.</p>"},{"location":"guides/basics/dependencies/#local-testing","title":"Local testing","text":"<p>To test dependency configuration on local machine, you can list dependendencies in the <code>mod.json</code>:</p> <pre><code>\"Dependencies\" : [ \"my_common_assets\", 2376260968 ]\n</code></pre> <p>String values are refer to local mods, and numbers are refer to published mods (you can find a published mod's id in its Steam page url).</p>"},{"location":"guides/basics/dependencies/#softhard-dependencies","title":"Soft/hard dependencies","text":"<p>Currently, all dependencies are soft. This means that if a mod on which your mod depends has not found, the game will try to load your mod anyway.</p>"},{"location":"guides/basics/how-to-publish-your-mod/","title":"How to publish your mod","text":"<p>EULA</p> <p>Please ensure that you have read and agreed with our EULA before publishing mods.</p> <p>First, check your mod.json for minimal required structure.</p> <p>Then, you need to prepare cover image of your mod. Save it as <code>preview.png</code> at the root of your mod folder. The image should be square and its dimensions should be at least <code>512x512</code> pixels.</p> <p>Tip</p> <p>Pressing F5 in the mod browser causes the game to reload mods metadata without need to reload the game.</p>"},{"location":"guides/basics/how-to-publish-your-mod/#publish-update-and-unpublish","title":"Publish, update, and unpublish","text":"<p>Just scroll to your mod in the in-game browser, and choose the appropriate action.</p> <p></p>"},{"location":"guides/basics/how-to-publish-your-mod/#mod-visiblity","title":"Mod visiblity","text":"<p>After your mod got published to the Workshop, it's only visible to you by default. You need to manually change it visibility to public when you are ready. It could take up to 30 minutes before the mod become avaible to anyone.</p> <p>You can control visibility and other settings (for example, localize mod's title and decription) on your mod's page.</p>"},{"location":"guides/basics/mod.json/","title":"mod.json","text":"<p><code>mod.json</code> contains the metadata for your mod allowing the game to see it and prepare it for publishing. The file should be placed to the root of your mod's folder.</p>"},{"location":"guides/basics/mod.json/#minimal-required-structure","title":"Minimal required structure","text":"<pre><code>{\n    \"Title\" : \"My first mod\",\n    \"Description\" : \"And that's my first mod description\",\n    \"Tags\": [ \"Tag 1\", \"Tag 2\" ]\n}\n</code></pre>"},{"location":"guides/basics/mod.json/#properties","title":"Properties","text":"Property Description Title Used only when publishing a new Steam mod. To change a title for an already published mod, use Steam Workshop Dashboard for your item. Description Used only when publishing a new Steam mod. To change a description for an already published mod, use Steam Workshop Dashboard for your item. Tags An array of Steam Workshop tags. For the list of available tags check the Workshop page (note that tag string values should exactly match those from the Workshop page). Dependencies An array of dependencies. Used only for local testing. To set up dependencies for a published mod, use Steam Workshop Dashboard for your item. PublishedFileId After uploading mod to Steam, <code>PublishedFileId</code> property will be added to your <code>mod.json</code>. It's the ID of your mod on Steam (you can see it in the mod's Workshop page url). This way, the game knows a relation between your local mod and the published one. Don't remove this property, or you won't be able to update your mod until you add it back. <p>Tip</p> <p>If you have lost your local copy of the mod you can always download mod files from the Workshop and re-add <code>PublishedFileId</code> manually to the <code>mod.json</code>.</p>"},{"location":"guides/content-mods/animating-locomotive-rods/","title":"Animating locomotive rods","text":"<p>This guide is authored by Voxel Tycoon community member scailman</p> <p>Steam locomotives and some diesel locomotives use rods to be able to move the wheels. In VT it's necessary to specify the position and rotation of each of rod so the game can animate them.</p> <p>This section within the <code>.trainunit</code> asset defines the different loops of the locomotive rods and the positions and rotations in the eight frames that each animation has.</p> <p>It's important to mention the starting position and mesh origin for each piece:</p> <ul> <li>Coupling Rod shares the locomotives mesh origin.</li> <li>Main Rod and Piston Rod share the same origin; the pivot point where the Piston Rod and Main Rod are connected (aka Crosshead Wristpin).</li> </ul> <p>We always start with the Piston Rod in the centre of it's travel, and the Coupling Rod centred in either the lowest point in rotation (as shown in the images below). This will dictate the correct length for the Main Rod.</p> <pre><code>\"Submeshes\": [\n  {\n    \"MeshUri\": \"mezcorp/c30_cr.obj\", // Coupling Rod\n    \"DefaultAnimation\": {\n        \"PositionY\": {\n        \"0\": 0.0,\n        \"0.125\": 0.028619,\n        \"0.25\": 0.097699,\n        \"0.375\": 0.168753,\n        \"0.5\": 0.196385,\n        \"0.625\": 0.168753,\n        \"0.75\": 0.097699,\n        \"0.875\": 0.028619,\n        \"1\": 0.0\n      },\n      \"PositionZ\": {\n        \"0\": 0.0,\n        \"0.125\": -0.070067,\n        \"0.25\": -0.0976,\n        \"0.375\": -0.068981,\n        \"0.5\": 0.0,\n        \"0.625\": 0.068981,\n        \"0.75\": 0.0976,\n        \"0.875\": 0.070067,\n        \"1\": 0.0\n      }\n    }\n  },\n  {\n    \"MeshUri\": \"mezcorp/c30_mr.obj\", // Main Rod\n    \"DefaultAnimation\": {\n      \"PositionY\": {\n        \"0\": 0.229511\n      },\n      \"PositionZ\": {\n        \"0\": 0.744807,\n        \"0.125\": 0.67474,\n        \"0.25\": 0.652042,\n        \"0.375\": 0.684608,\n        \"0.5\": 0.747767,\n        \"0.625\": 0.823755,\n        \"0.75\": 0.851387,\n        \"0.875\": 0.817834,\n        \"1\": 0.744807\n      },\n        \"RotationX\": {\n        \"0\": 0,\n        \"0.125\": 2.28828,\n        \"0.25\": 7.63773,\n        \"0.375\": 13.2599,\n        \"0.5\": 15.4827,\n        \"0.625\": 13.2599,\n        \"0.75\": 7.63773,\n        \"0.875\": 2.28828,\n        \"1\": 0\n      }\n    }\n  },\n  {\n    \"MeshUri\": \"mezcorp/c30_pr.obj\", // Piston Rod\n    \"DefaultAnimation\": {\n      \"PositionY\": {\n        \"0\": 0.229511\n      },\n        \"PositionZ\": {\n        \"0\": 0.744807,\n        \"0.125\": 0.67474,\n        \"0.25\": 0.652042,\n        \"0.375\": 0.684608,\n        \"0.5\": 0.747767,\n        \"0.625\": 0.823755,\n        \"0.75\": 0.851387,\n        \"0.875\": 0.817834,\n        \"1\": 0.744807\n      },\n    }\n  }\n]\n</code></pre> <ul> <li>MeshUri: Path of the file that contains the mesh of the rod.</li> <li>PositionX, PositionY, PositionZ: Coordinate value depending on the axis that has been indicated.</li> <li>RotationX: Represents the degrees of rotation on the X-axis.</li> </ul> <p>Each animation is made up of eight frames ranging from 0 to 1. Each frame rotates the wheels 45 degrees clockwise.</p> <p> </p> <p>We will start animating the coupling rod. The first thing is to turn the central wheel clockwise 45 degrees by rotating on the X-axis, and then move the coupling rod to coincide with the point of attachment of the wheel.</p> <p>Once we have the rod in position, we must write down the positions on the Y-axis and Z-axis, which are the values that we have to enter in the second frame of the animation of the coupling rod in the <code>.trainunit</code> asset.</p> <p></p> <p>The axes can change according to the 3d modeling program we are using, but the positions will always be the same.</p> <p>Also, see that position Z has the a negative symbol in the <code>.trainunit</code> asset.</p> <p>We will keep moving the coupling rod in the same way until we reach the fifth frame that represents half of the animation, where we just need to change the sign of the remaining frames on the Z-axis and repeat the values of the Y-axis frames.</p> <p>The piston rod is the easiest animation since the position on the Y-axis does not vary and only moves along the Z-axis. Also, the position on the Z-axis coincides with the position of the main rod on the same axis.</p> <p>For the main rod, we must do the same as with the coupling rod; we move it until the end coincides with the point of union with the coupling rod.</p> <p></p> <p>When we have finished the animation, we must put the rods in position <code>0,0,0</code>, now and we can export them.</p>"},{"location":"guides/content-mods/creating-a-new-track-type-mod/","title":"Creating a new track type mod","text":"<p>This guide is authored by Voxel Tycoon community member scailman</p>"},{"location":"guides/content-mods/creating-a-new-track-type-mod/#introduction","title":"Introduction","text":"<p>We can create any type of rail but with certain limitations, such as the height of the rails.</p> <p>When we create a new rail type, we also have to take into account that  we need to make new stations and train depots. Alternatively we can modify the stations and train depots of the base game to use the new rails.</p> <p>There are elements that are common to any rail type , which are signals, bridges and tunnels. This guide will explain how to create all of these, although it is possible to use the default base game assets as they adapt to different rail types automatically.</p> <p>Whatever rail type we create, currently any train will be able to use it. To look right in the game and depending on the type of rails we create, we may need to create the right trains. For more information about creating a train, read the guide: Creating your first locomotive mod.</p>"},{"location":"guides/content-mods/creating-a-new-track-type-mod/#rails-setup","title":"Rails setup","text":"<p>In the 3d program that we are using, we must create each element of the tracks separately. In the following image you can see from left to right: StraightCap, DiagonalCap, Rail1, Rail2 and Rail3 elements.</p> <p>All elements must be centered on the coordinate axis at position 0,0,0.</p> <p>The modeling is exactly the same as any type of building or vehicle that we can create in the game. If you need a more detailed explanation you can read the guide: Creating your first building mod.</p> <p></p>"},{"location":"guides/content-mods/creating-a-new-track-type-mod/#configuring-the-rails-rail-asset","title":"Configuring the rails (<code>.rail</code> asset)","text":"<p>The train tracks are made up of three parts, the rails, the sleepers and the ballast. The rails and the ballast are generated by extrusion. This means that these elements are generated by stretching the mesh on the Z axis. If the rails have any element that is not generated by extrusion, it will be deformed or will not display correctly.</p> <p>The configuration also includes the mesh of the catenary poles as well as the height of the catenary wire.</p> <p>Tracks have a limitation in that, they cannot be linked with others of a different type.</p> <p></p> <pre><code>{\n  \"ElectrificationPrice\": 150.0,\n  \"Height\": 0.4,\n  \"PoleMeshUri\": \"rubber_tires_system/pole.obj\",\n  \"WireHeight\": 0.35,\n  \"LofterIngredients\": [\n    {\n      \"Mode\": \"Loft\",\n      \"MeshUri\": \"rubber_tires_system/rubber_rail_1.obj\",\n      \"Length\": 0.45\n    },\n    {\n      \"Mode\": \"Repeat\",\n      \"MeshUri\": \"rubber_tires_system/rubber_rail_2.obj\",\n      \"Length\": 1.0\n    },\n    {\n      \"Mode\": \"Loft\",\n      \"MeshUri\": \"rubber_tires_system/rubber_rail_3.obj\",\n      \"Length\": 0.45\n    }\n  ],\n  \"EmbankmentLofterIngredients\": [\n    {\n      \"Mode\": \"LoftUnoptimized\",\n      \"MeshUri\": \"base/regular_rail_embankment_1.obj\",\n      \"Length\": 0.8\n    }\n  ],\n  \"Meshes\": {\n    \"StraightCap\": \"rubber_tires_system/rubber_railcap_s.obj\",\n    \"DiagonalCap\": \"rubber_tires_system/rubber_railcap_d.obj\"\n  },\n  \"ResearchUri\": \"rubber_tires_system/rubber_tires_system.research\",\n  \"Price\": 200.0,\n  \"RunningCosts\": null,\n  \"Hidden\": false\n}\n</code></pre> <ul> <li>ElectrificationPrice: Price of each catenary section.</li> <li>Height: Height of rails above ground level. This value must not exceed 0.499. If the value is 0.5 or greater, the rails will sink into the ground.</li> <li>PoleMeshUri: Obj file of the catenary pole mesh that will be used when track is electrified.</li> <li>WireHeight: Catenary wire height.</li> <li> <p>LofterIngredients (Array):  This section specifies the three elements that represent the track, the rails, the sleepers and the ballast.</p> </li> <li> <p>Mode: How the item is generated. Possible values are Loft and Repeat. If the value is Loft, the element is extruded on the Z axis. The repeat mode makes the element repeat every certain space.</p> </li> <li>MeshUri: Path of the .obj file.</li> <li> <p>Length: Section length. It can also refer to the repetition distance of the element.</p> </li> <li> <p>EmbankmentLofterIngredients (Array):  This section specifies the object that will be used for track slopes.</p> </li> <li>Meshes: Meshes used for the end of the track.</li> <li>StraightCap: Meshes used for straight end track.</li> <li>DiagonalCap: Meshes used for diagonal end track. (45 degrees)</li> <li>ResearchUri: Path to the <code>.research</code> asset required to unlock the track type.</li> <li>Price: Price of each track section.</li> <li>RunningCosts: Track maintenance cost.</li> <li>Hidden: Specifies if the track type is visible in the track construction menu.</li> </ul>"},{"location":"guides/content-mods/creating-a-new-track-type-mod/#creating-the-station","title":"Creating the station","text":"<p>The modeling of the stations in many cases have to consider the type of track that will use it and the trains that will stop on it. This might mean having to do higher platforms or with less separation between the tracks.</p> <p>Train stations can have very different appearances as we have a certain degree of personalization with the decorations that we can create and that will be repeated along the length of the platform. We can have different types of furniture such as benches, signs, lampposts or any other element decorative, but also use limitations such as maximum platform width and length to create multi-platform decorations from one .obj file.</p> <p></p>"},{"location":"guides/content-mods/creating-a-new-track-type-mod/#train-station-setup-railstation-asset","title":"Train station setup (<code>.railstation</code> asset)","text":"<p>Train stations allow trains to load and unload cargo. </p> <p>They have a maximum length and a maximum number of platforms by default, but if we wish we can restrict the maximum and minimum values manually.</p> <p>The platforms have several elements that are repeated according to the size of the station that we place during the game. </p> <p>The stations are made up of an initial section (cap), an intermediate section and a final section. This also applies to the central platforms. It can also include have decorations such as benches, lampposts, posters or cranes that are repeated throughout the entire platform.</p> <p></p> <pre><code>{\n  \"Height\": 4,\n  \"RailUri\": \"rubber_tires_system/rubber_tires_system.rail\",\n  \"EdgePlatform\": {\n    \"Mesh\": \"rubber_tires_system/passenger_rail_station_edge_platform.obj\",\n    \"Cap1Mesh\": \"rubber_tires_system/passenger_rail_station_edge_platform_cap1.obj\",\n    \"Cap2Mesh\": \"rubber_tires_system/passenger_rail_station_edge_platform_cap2.obj\",\n    \"Decorations\": [\n      \"rubber_tires_system/passenger_rail_station_board.obj\",\n      null,\n      \"rubber_tires_system/passenger_rail_station_bench.obj\",\n      null\n    ]\n  },\n  \"IslandPlatform\": {\n    \"Mesh\": \"rubber_tires_system/passenger_rail_station_island_platform.obj\",\n    \"Cap1Mesh\": \"rubber_tires_system/passenger_rail_station_island_platform_cap1.obj\",\n    \"Cap2Mesh\": \"rubber_tires_system/passenger_rail_station_island_platform_cap2.obj\",\n    \"Decorations\": [\n      null,\n  null,\n  null,\n  null\n    ]\n  },\n  \"MinWidth\": null,\n  \"MaxWidth\": null,\n  \"DefaultWidth\": null,\n  \"MinLength\": null,\n  \"MaxLength\": null,\n  \"DefaultLength\": null,\n  \"ResearchUri\": \"rubber_tires_system/rubber_tires_system.research\",\n  \"Price\": 220.0,\n  \"RunningCosts\": null,\n  \"Hidden\": false\n}\n</code></pre> <ul> <li>Height: Maximum station height. This value prevent building other elements at height lower than this above station.</li> <li>RailUri: Path of the <code>.rail</code> asset used in the station.</li> <li>EdgePlatform (Array): This section define the different elements of the side platforms of the station. The platforms are divided in four parts, start cap section, middle section, end cap section and decorations. Each element is specified in the parameters Mesh, Cap1Mesh, Cap2Mesh and the subsection Decorations.</li> <li>IslandPlatform: The platform island elements are the same as edge platform section but this time all elements are setup to create the central platform of the stations if there are two or more tracks.</li> <li>MinWidth: Minimum number of tracks of the station.</li> <li>MaxWidth: Maximum number of tracks of the station.</li> <li>DefaultWidth: Default truck number when the station is selected from the station building menu the first time.</li> <li>MinLength: Minimum possible platform length measurement in voxels.</li> <li>MaxLength: Maximum possible platform length measurement in voxels.</li> <li>DefaultLength: Default platform length when the station is selected from the station building menu the first time.</li> <li>ResearchUri: Path of the <code>.research</code> asset that unlocks the station.</li> <li>Price: Price of each section of the station. (The price can change depending om the length and number of platforms of the station).</li> <li>RunningCosts: Maintenance costs of the station. If set to null, the game automatically calculates the costs.</li> <li>Hidden: This parameter tells the game if the station is visible or not in the station building menu.</li> </ul>"},{"location":"guides/content-mods/creating-a-new-track-type-mod/#train-depot-raildepot-asset","title":"Train depot (<code>.raildepot</code> asset)","text":"<p>The train depot is where the trains are purchased in the game. It\ufffds menu will show all available trains. Trains can use any type of track and have no restriction when using it. This means that in most cases, we will have to create specific trains for specific track type of road if we want them to appear visually correct.</p> <p></p> <pre><code>{\n  \"Rails\": [\n    {\n      \"SpawnConnectionIndex\": null,\n      \"Uri\": \"rubber_tires_system/rubber_tires_system.rail\",\n      \"RailType\": \"Straight\",\n      \"Position\": {\n        \"X\": 2,\n        \"Y\": 0,\n        \"Z\": 1\n      },\n      \"Rotation\": \"Rotate0\",\n      \"Handle\": false,\n      \"DisallowSignals\": true\n    },\n    // ...skipping a few track sections here to to simplify the example... \n\n    {\n      \"SpawnConnectionIndex\": null,\n      \"Uri\": \"rubber_tires_system/rubber_tires_system.rail\",\n      \"RailType\": \"StraightCap\",\n      \"Position\": {\n        \"X\": 2,\n        \"Y\": 0,\n        \"Z\": 10\n      },\n      \"Rotation\": \"Rotate0\",\n      \"Handle\": true,\n      \"DisallowSignals\": false\n    }\n  ],\n  \"ClippingPlanes\": [\n    {\n      \"MeshUri\": \"base/clipping_plane.obj\",\n      \"Position\": [0, 1.3, 4.3],\n      \"Rotation\": [0, 0, 0],\n      \"Scale\": [2.3, 2.6, 1]\n    }\n  ],\n  \"ResearchUri\": \"rubber_tires_system/rubber_tires_system.research\",\n  \"Size\": {\n    \"X\": 6,\n    \"Y\": 4,\n    \"Z\": 10\n  },\n  \"Liveries\": {\n    \"default\": {\n      \"MeshUri\": \"rubber_tires_system/rubber_tires_depot.obj\",\n      \"MeshVariant\": null,\n      \"Lights\": null\n    }\n  },\n \"Price\": 21200.0,\n  \"RunningCosts\": null,\n  \"Hidden\": false\n}\n</code></pre> <ul> <li>Rails (Array): This section specifies the track type, the section type, the track position and some other parameters.</li> <li>SpawnConnectionIndex: It defines at what end of rail (there's two for regular straigt rail) the train should spawn. So it's set to some value (0) for the rails in depot and nulls for other rails in the depot.</li> <li>Uri: Path of the <code>.rail</code> asset used to place the track in the depot.</li> <li>RailType: Type of mesh used in this track section. The possible rail type can be Straight or  StraightCap.</li> <li>Position: Position of the rail based in a grid. It follows the same rules of conveyors    placement in the devices.</li> <li>Rotation: Rail rotation. The possible values are: Rotate0, Rotate90, Rotate180 and  Rotate270. The rotation must always be Rotate0 because the depot (in most cases) only has one track along the length of the building.</li> <li>Handle: This parameter sets whether or not it is possible to connect a track at this point of the depot, to the rest of the world. This parameter will be true if is the end section of the track of the depot.</li> <li>DisallowSignals: This parameter prevents placing signals on this track section. If it's the  end section of track, the value is false.</li> <li>ClippingPlanes (Array): The clipping plane is an element that is placed at the entrance of the depot and creates a darkening effect.</li> <li>MeshUri: Path of the mesh file.</li> <li>Position: Position of the clipping plane in X,Y,Z axis.</li> <li>Rotation: Rotation of the clipping plane in X,Y,Z axis. </li> <li>Scale: Scale determines the size of the clipping plane in X,Y,Z axis. </li> <li>ResearchUri: Path of the <code>.research</code> asset that unlock the depot.</li> <li>Size: Size of the building in X,Y, Z axis.</li> <li>Liveries (Array): This section contains the building mesh and all night lights variations.</li> <li>MeshUri: Building .obj file mesh.</li> <li>MeshVariant (Array):  If there are night variants for the windows, this sectiondefines them. Learn more about how to configure the night windows effect in the guide: Creating your first building mod.</li> <li>Lights (Array): You can add two type of lights, point lights and spotlights. These lights don't cast shadows.   <pre><code>\"Lights\": [\n  {\n    \"Type\": \"Point\",\n    \"Color\": \"ffe200\",\n    \"Position\": [0, 0.5, 0],\n    \"Range\": 2.0,\n    \"Intensity\": 1.0,\n    \"SpotAngle\": 0.0\n  }\n]\n</code></pre></li> <li>Type: The lights can be point light (Point) or spotlights (Spotlight).</li> <li>Color: Hexadecimal value of the light color.</li> <li>Position: Light position in X, Y, Z axis.</li> <li>Range: Light radius in meters.</li> <li>Intensity: Light intensity. The default value is 1.0. Values above 1 make the light more bright, and below 1 less intense.</li> <li>SpotAngle: If the lights is a spotlight, this parameter specify the direction of the light in degrees.</li> <li>Price: Price of the building.</li> <li>RunningCosts: Maintenance cost of the building.</li> <li>Hidden: This parameter tells the game if the depot is visible or not in the depot building menu.</li> </ul>"},{"location":"guides/content-mods/creating-a-new-track-type-mod/#signals-regularrailsignal-and-chainrailsignal-asset","title":"Signals (<code>.regularrailsignal</code> and <code>.chainrailsignal</code> asset)","text":"<p>Currently, there are two types of signals; chain signals and pre-signals.</p> <p>Depending on the needs of the railway network, we must place one type or another.</p> <p>The configuration of the signals is very simple because it only depends on either two different meshes or three in the case of pre-signals. The first mesh (<code>.obj</code> file) is for the green signal state and the second mesh is for the red signal state. If the signal is of the pre-signal type, the second mesh corresponds to the amber state of the signal.</p> <p></p> <pre><code>{\n  \"MeshUris\": [\n    \"rubber_tires_system/rubber_tires_presignal_1.obj\",\n    \"rubber_tires_system/rubber_tires_presignal_2.obj\",\n    \"rubber_tires_system/rubber_tires_presignal_3.obj\"\n  ],\n  \"Price\": 1550.0,\n  \"ResearchUri\": \"rubber_tires_system/rubber_tires_system.research\"\n}\n</code></pre> <ul> <li>MeshUris (Array): In this section all the meshes for the signal states are listed. For now you can't animate signals between states.</li> <li>Price: Signal price.</li> <li>ResearchUri: Path of the <code>.research</code> asset that unlock the signal.</li> </ul> <p></p> <pre><code>{\n  \"MeshUris\": [\n    \"rubber_tires_system/rubber_tires_regular_1.obj\",\n    \"rubber_tires_system/rubber_tires_regular_2.obj\"\n  ],\n  \"Price\": 1100.0,\n  \"ResearchUri\": \"rubber_tires_system/rubber_tires_system.research\"\n}\n</code></pre>"},{"location":"guides/content-mods/creating-a-new-track-type-mod/#bridges-railbridge-asset","title":"Bridges (<code>.railbridge</code> asset)","text":"<p>Bridges are used to overcome obstacles, such as roads and other train tracks.</p> <p>Depending on the type of bridge, it may have different span between pillars, which makes its use conditioned by the surrounding environment.</p> <p>The other restriction that we can configure is the maximum height of the bridge. Depending on the type of bridge we are creating, the pillars can have an upper part, a middle part and a base part.</p> <p></p> <pre><code>{\n  \"SpanMeshUri\": \"base/arc_rail_bridge_span_3.obj\",\n  \"SpanLength\": 3,\n  \"SpanHeight\": 3,\n  \"MinHeight\": 0,\n  \"MaxHeight\": 6,\n  \"DefaultHeight\": 3,\n  \"LofterIngredients\": [\n    {\n      \"Mode\": \"Loft\",\n      \"MeshUri\": \"base/arc_rail_bridge_1.obj\",\n      \"Length\": 0.8\n    }\n  ],\n  \"PierBottomMeshUri\": null,\n  \"PierMeshUri\": \"base/arc_rail_bridge_pillar.obj\",\n  \"PierTopMeshUri\": null,\n  \"PierOffset\": 0.25,\n  \"ResearchUri\": \"base/rails.research\",\n  \"Price\": 500.0,\n  \"RunningCosts\": null,\n  \"Hidden\": false\n}\n</code></pre> <ul> <li>SpanMeshUri: Main mesh of the bridge. Specifies the path of the .obj file that forms the main section of the bridge.</li> <li>SpanLength: Length in voxels of the central section of the bridge. It determines the length of the spacing between pillars.</li> <li>SpanHeight: Height of the main section of the bridge. Bridges must be a minimum of three voxels high to be built over a track or road.</li> <li>MinHeight: Minimum bridge height.</li> <li>MaxHeight: Maximum bridge height. It prevents building something above the bridge if the height is less than that specified.</li> <li>DefaultHeight: Default height at which the bridge will be built.</li> <li>LofterIngredients (Array):  Bridge section that is generated in case the length is less than that indicated in the SpanLenght parameter.</li> <li>PierBottomMeshUri: Mesh used on top of bridge pillar. If the value is null it will not be used in the bridge.</li> <li>PierMeshUri: Mesh used on middle part of bridge pillar. If the value is null it will not be used in the bridge.</li> <li>PierTopMeshUri: Mesh used on the bottom of bridge pillar. If the value is null it will not be used in the bridge.</li> <li>PierOffset: Sets the value of pillar offset.</li> <li>ResearchUri: Path of the <code>.research</code> asset that unlock the bridge. </li> </ul>"},{"location":"guides/content-mods/creating-a-new-track-type-mod/#tunnels-railtunnel-asset","title":"Tunnels (<code>.railtunnel</code> asset)","text":"<p>Tunnels general have a common appearance across all types of rails, the only difference being the entrance that can be customized to better suit the style we want to give it.</p> <p>The tunnels are made up of three different meshes, the outer facade, the inner facade and the inner walls of the tunnel.</p> <p></p> <p>The tunnels allowed us to overcome obstacles such as other tracks or roads. For now only the construction of straight tunnels is allowed. In the future its planned that the tunnels will have curves to be able to build underground systems.</p> <pre><code>{\n  \"MeshUri\": \"base/concrete_rail_tunnel_1.obj\",\n  \"InCapMeshUri\": null,\n  \"OutCapMeshUri\": \"base/concrete_rail_tunnel_cap.obj\",\n  \"MinDepth\": 0,\n  \"MaxDepth\": 7,\n  \"DefaultDepth\": 3,\n  \"ResearchUri\": \"base/rails.research\",\n  \"Price\": 1500.0,\n  \"RunningCosts\": null,\n  \"Hidden\": false\n}\n</code></pre> <ul> <li>MeshUri: Path of the mesh of the interior walls of the tunnel. This object will be extruded along the entire length of the tunnel.</li> <li>InCapMeshUri: Path of the mesh used for the inner tunnel facade.</li> <li>OutCapMeshUri: Path of the mesh used for the outter tunnel facade. </li> <li>MinDepth: Minimum depth at which the tunnel can be built. A value of 0 means it's ground level.</li> <li>MaxDepth: Maximum depth that the tunnel can have measured in voxels.</li> <li>DefaultDepth: Default depth at which the tunnel is built. By default the value is 3.</li> <li>ResearchUri: Path of the <code>.research</code> asset that unlocks the tunnel.</li> <li>Price: Tunnel price per section.</li> <li>RunningCosts: Tunnel maintenance cost. By default the value is null.</li> <li>Hidden: Specifies if the tunnel is visible in the tunnel build menu.</li> </ul>"},{"location":"guides/content-mods/creating-a-new-track-type-mod/#further-reading","title":"Further reading","text":"<ul> <li>How to publish your mod</li> </ul>"},{"location":"guides/content-mods/creating-a-small-production-chain/","title":"Creating a small production chain","text":"<p>This guide is authored by Voxel Tycoon community member scailman</p>"},{"location":"guides/content-mods/creating-a-small-production-chain/#introduction","title":"Introduction","text":"<p>In this guide you will learn how to create a new industry and all the elements that make it up. It's not a complex task but it's necessary to take into account many elements that are related to each other.</p> <p>Since we've explained how to create vehicles and trains in other guides, the process for their creation will not be repeated in this guide.</p> <p>A production chain can be very simple, using products and buildings that already exist in the base game, or have a very high degree of complexity, it all depends on our imagination.</p> <p>The best thing before starting to create items, buildings and vehicles, is to have an idea of what we want to do and create a small diagram of all the elements that our production chain needs. This is highly recommended since on many occasions we will have to link buildings with items or vehicles and problems may come up when we forget to correctly configure something in an asset.</p> <p>A production chain is made up of several steps, ore deposits, mining buildings, product processing building, warehouses and stores. All the buildings interact with each other and each one has a different extraction and production time, so adjustments must be made to have a balanced production in the different phases.</p>"},{"location":"guides/content-mods/creating-a-small-production-chain/#raw-material-deposits-depositrecipe-asset","title":"Raw material deposits (<code>.depositrecipe</code> asset)","text":"<p>Deposits of raw materials are the beginning of the production chain and are scattered throughout the regions. They are the main source of resources. As a finite amount of resources, they will become depleted when fully mined and will no longer be possible to extract.</p> <p></p> <pre><code>{\n  \"ItemUri\": \"scm_oil_industry/crude.item\",\n  \"TintColor\": \"353535\",\n  \"RadiusMultiplier\": 0.5,\n  \"CapacityMultiplier\": null,\n  \"DecorationUris\": [],\n  \"Tier\": 0\n}\n</code></pre> <ul> <li>ItemUri: Path of the item asset that will be extracted from the deposit.</li> <li>TintColor: This is the hexadecimal value of the color that the element represents on the map and when we press the Alt key to show icons on the map.</li> <li>RadiusMultiplier: Deposit size. By default the value is <code>null</code>. Values above <code>1</code> increase size and below decrease it.</li> <li>CapacityMultiplier: Amount of resources that can be extracted from the deposit. The default value is <code>null</code>.</li> <li>DecorationUris (Array):  Deposits can have decorations like trees in forests. It's a list of all the paths of the asset files that will be shown as decoration on the deposit.</li> </ul> <pre><code>\"DecorationUris\": [\n    \"base/spruce.plant\"\n]\n</code></pre> <ul> <li>Tier: Deposit level. Deposits at tier 0 are included in the first available region when a new map is created. Higher tiers are available at a further distance. E.g. Coal, Iron Ore and Wood are tier 0, but Copper, Sand and Stone are tier 1.</li> </ul>"},{"location":"guides/content-mods/creating-a-small-production-chain/#extracting-resources-mine-asset","title":"Extracting resources (<code>.mine</code> asset )","text":"<p>Mines or any other type of building that allows the extraction of raw resources are special buildings that must be placed  whithin the area of the deposit. They can only be placed in the resource that it can extract, for example you can't place an iron mine in a coal deposit. Mines can have animated submeshes like steam locomotives and sound and smoke for when they're active.</p> <p></p> <pre><code>{\n  \"OutputInterval\": 5.5,\n  \"Submeshes\": [\n    {\n      \"MeshUri\": \"scm_oil_industry/main_arm.obj\",\n      \"DefaultAnimation\": {\n        \"PositionY\": {\n          \"0\": 1.92\n        },\n        \"PositionZ\": {\n          \"0\": 0.176 // y -0,176\n        },\n        \"RotationX\": {\n          \"0\": 0.0,\n          \"0.125\": -6.12,\n          \"0.25\": -18.682,\n          \"0.375\": -29.730,\n          \"0.5\": -34.724,\n          \"0.625\": -33.659,\n          \"0.75\": -20.718,\n          \"0.875\": -6.333,\n          \"1\": 0.0\n        }\n      }\n    },\n    {\n      \"MeshUri\": \"scm_oil_industry/rod.obj\",\n      \"DefaultAnimation\": {\n        \"PositionY\": {\n          \"0\": 1.069,\n          \"0.125\": 0.991,\n          \"0.25\": 0.802,\n          \"0.375\": 0.613,\n          \"0.5\": 0.534,\n          \"0.625\": 0.613,\n          \"0.75\": 0.802,\n          \"0.875\": 0.991,\n          \"1\": 1.069\n        },\n        \"PositionZ\": {\n          \"0\": -0.738,\n          \"0.125\": -0.549,\n          \"0.25\": -0.47,\n          \"0.375\": -0.549,\n          \"0.5\": -0.737,\n          \"0.625\": -0.926,\n          \"0.75\": -1.005,\n          \"0.875\": -0.926,\n          \"1\": -0.738\n        },\n        \"RotationX\": {\n          \"0\": 0.0,\n          \"0.125\": -12.104,\n          \"0.25\": -15.204,\n          \"0.375\": -6.296,\n          \"0.5\": 8.13,\n          \"0.625\": 20.407,\n          \"0.75\": 20.007,\n          \"0.875\": 12.128,\n          \"1\": 0.0\n        }\n      }\n    },\n    {\n      \"MeshUri\": \"scm_oil_industry/rotor.obj\",\n      \"DefaultAnimation\": {\n        \"PositionY\": {\n          \"0\": 0.801\n        },\n        \"PositionZ\": {\n          \"0\": -0.738\n        },\n        \"RotationX\": {\n          \"0\": 0.0,\n          \"0.125\": 45,\n          \"0.25\": 90,\n          \"0.375\": 135,\n          \"0.5\": 180,\n          \"0.625\": 225,\n          \"0.75\": 270,\n          \"0.875\": 315,\n          \"1\": 360\n        }\n      }\n    }\n  ],\n  \"Sounds\": null,\n  \"Smokes\": null,\n  \"ResearchUri\": \"scm_oil_industry/oil_extraction.research\",\n  \"Size\": {\n    \"X\": 2,\n    \"Y\": 3,\n    \"Z\": 3\n  },\n  \"Liveries\": {\n    \"default\": {\n      \"MeshUri\": \"scm_oil_industry/crude_pump.obj\",\n      \"MeshVariant\": null,\n      \"Lights\": null\n    }\n  },\n  \"Price\": 53000.0,\n  \"RunningCosts\": null,\n  \"Hidden\": false\n}\n</code></pre> <ul> <li>OutputInterval: The time in seconds it takes to generate one unit.</li> <li>Submeshes (Array): The positions of the animations of the different meshes. For more information read the guide: Animating locomotive rods.</li> <li> <p>Sound (Array):</p> <ul> <li>SoundUri: Path of the .wav file used when the mine is active. </li> <li>Time: Sound duration time.   <pre><code>\"Sounds\": [\n    {\n      \"SoundUri\": \"base/alloy_smelter_device.wav\",\n      \"Time\": 0.5\n    }\n]\n</code></pre></li> </ul> </li> <li> <p>Smoke (Array):</p> <ul> <li>Uri: Path of the <code>.smoke</code> asset.</li> <li>Position: Smoke position in X, Y, Z axis.     <pre><code>\"Smokes\": [\n    {\n      \"Uri\": \"scm_oil_industry/refinery_device.smoke\",\n      \"Position\": [-1.583, 5.4, 1.305]\n    }\n</code></pre></li> </ul> </li> <li> <p>ResearchUri: Path of the <code>.research</code> asset that allows the building to be researched to make it available in game.</p> </li> <li>Size (Array): Building size on X, Y, Z axes.</li> <li>Liveries (Array): Specifies the path of the building's <code>.obj</code> file. For more information about this section read the guide: Creating your first building mod.</li> <li>Price: Building purchase price.</li> <li>RunningCosts: Building maintenance cost. By default the value is <code>null</code>.</li> <li>Hidden: Indicates whether or not the building appears in the mine construction menu. By default the value is false.</li> </ul> <p>As with trains or trucks, you must have a <code>.capacities</code>, <code>.heapcapacities</code>, or <code>.stackcapacities</code> asset to specify which item it produces.</p> <pre><code>{\n  \"Items\": {\n    \"scm_oil_industry/crude.item\": null\n  },\n  \"TargetUri\": \"scm_oil_industry/crude_pump.mine\",\n  \"MaxWeight\": 100.0,\n  \"LoadingSpeedMultiplier\": 1.0,\n  \"UnloadingSpeedMultiplier\": 1.0\n}\n</code></pre>"},{"location":"guides/content-mods/creating-a-small-production-chain/#manufacturing-products-device-asset","title":"Manufacturing products (<code>.device</code> asset)","text":"<p>Devices are the intermediate industries between raw material deposits and stores. These buildings require materials to produce the products that will be supplied to the stores. Unlike the other buildings, these have input and output conveyor to supply raw materials or other required items. The entrances and exits can be placed on any of the four facades of the building and don't have an established directionality, that is, if the building requires one item to produce another and has one entrance and one exit, it doesn't matter the direction of the conveyor.</p> <p></p> <pre><code>{\n  \"RecipeTargetUri\": \"scm_oil_industry/refinery.recipetarget\",\n  \"Submeshes\": [],\n  \"Sounds\": [\n    {\n      \"SoundUri\": \"scm_oil_industry/refinery_device.wav\",\n      \"Time\": 0.5\n    }\n  ],\n  \"Smokes\": [\n    {\n      \"Uri\": \"scm_oil_industry/refinery_device.smoke\",\n      \"Position\": [-1.583, 5.4, 1.305]\n    }\n  ],\n  \"ClippingPlanes\": null,\n  \"Conveyors\": [\n    {\n      \"SpawnConnection\": 1,\n      \"Uri\": \"base/regular.conveyor\",\n      \"ConveyorType\": \"StraightShort\",\n      \"Position\": {\n        \"X\": 0,\n        \"Y\": 0,\n        \"Z\": 4\n      },\n      \"Rotation\": \"Rotate90\",\n      \"Handle\": false\n    },\n    {\n      \"SpawnConnection\": null,\n      \"Uri\": \"base/regular.conveyor\",\n      \"ConveyorType\": \"Cap\",\n      \"Position\": {\n        \"X\": -1,\n        \"Y\": 0,\n        \"Z\": 4\n      },\n      \"Rotation\": \"Rotate90\",\n      \"Handle\": true\n    },\n    {\n      \"SpawnConnection\": 1,\n      \"Uri\": \"base/regular.conveyor\",\n      \"ConveyorType\": \"StraightShort\",\n      \"Position\": {\n        \"X\": 0,\n        \"Y\": 0,\n        \"Z\": 5\n      },\n      \"Rotation\": \"Rotate90\",\n      \"Handle\": false\n    },\n    {\n      \"SpawnConnection\": null,\n      \"Uri\": \"base/regular.conveyor\",\n      \"ConveyorType\": \"Cap\",\n      \"Position\": {\n        \"X\": -1,\n        \"Y\": 0,\n        \"Z\": 5\n      },\n      \"Rotation\": \"Rotate90\",\n      \"Handle\": true\n    }\n  ],\n  \"ResearchUri\": \"scm_oil_industry/oil_extraction.research\",\n  \"Size\": {\n    \"X\": 7,\n    \"Y\": 6,\n    \"Z\": 8\n  },\n  \"Liveries\": {\n    \"default\": {\n      \"MeshUri\": \"scm_oil_industry/refinery_device.obj\",\n      \"MeshVariant\": null,\n      \"Lights\": null\n    }\n  },\n  \"Price\": 45500.0,\n  \"RunningCosts\": null,\n  \"Hidden\": false\n}\n</code></pre> <ul> <li>RecipeTargetUri: The asset responsible for the building to accept recipes. The asset only contains the {} characters.</li> <li>Submeshes (Array): If the building has animated meshes in this section, the positions and rotations of each mesh are specified.</li> <li> <p>Sound (Array):</p> <ul> <li>SoundUri: Path of the .wav file used when the mine is active. </li> <li>Time: Sound duration time.</li> </ul> </li> <li> <p>Smoke (Array):</p> <ul> <li>Uri: Path of the <code>.smoke</code> asset.</li> <li>Position: Smoke position in X, Y, Z axis.</li> </ul> </li> <li> <p>ClippingPlanes: This is a plane that allows to darken an area of the building. An example is the plane used in train depots.</p> </li> <li> <p>Conveyors (Array): This section defines the conveyor belt as well as its position, orientation and type. An industry can have as many conveyor belts as desired and they don't all have to be on the same building facade.   In this conveyor placement example, the building has a size of 6x8. In the right diagram, the light gray area represents the building.   The coordinates (0,0) are always in the upper right corner of the building and the positive values go from right to left and from top to bottom.   Values will be negative if they are above or to the right of the coordinates (0,0).   The code shown above represent an industry that have two conveyor (orange area in the diagram) that start at positions (0,4) and (0,5) respectively and have a rotation  of  90 degrees.   The rotation of the conveyors goes counterclockwise and starts at 0 degrees at the bottom of the building.   </p> </li> <li> <p>SpawnConnection: Specifies the connection of the conveyor where items will spawn. The beginning of the conveyor always has a value of <code>1</code>.</p> </li> <li>Uri: Path of the <code>.conveyor</code> asset.</li> <li>ConveyorType: Type of tape to be placed in position. The possible values are: Cap, StraightShort and StraightExtraShort.</li> <li>Position: Position of the tape section on the X, Y, Z axes with respect to the grid shown in the previous image.</li> <li>Rotation: Conveyor rotation. Possible values: <code>Rotation0</code>, <code>Rotation90</code>, <code>Rotation180</code>, and <code>Rotation270</code>.</li> <li>Handle: Indicates whether the player can connect a conveyor or not.</li> <li>ResearchUri: Path of the <code>.research</code> asset that allows the building to be researched to make it available in game.</li> <li>Size (Array): Building size on X, Y, Z axes.</li> <li>Liveries (Array): Specifies the path of the building's <code>.obj</code> file. For more information about this section read the guide: Creating your first building mod.</li> <li>Price: Building purchase price.</li> <li>RunningCosts: Building maintenance cost. By default the value is <code>null</code>.</li> <li>Hidden: Indicates whether or not the building appears in the mine construction menu. By default the value is <code>false</code>.</li> </ul>"},{"location":"guides/content-mods/creating-a-small-production-chain/#devices-recipes-recipe-asset","title":"Devices recipes (<code>.recipe</code> asset)","text":"<p>In order to produce items an industry must have a recipe that tells what item it requires, how much quantity it needs, and what product is manufactured from that quantity of items.</p> <pre><code>{\n  \"TargetUri\": \"scm_oil_industry/refinery.recipetarget\",\n  \"Duration\": 18.0,\n  \"InputItems\": [\n    {\n      \"Uri\": \"scm_oil_industry/crude.item\",\n      \"Count\": 10.0\n    }\n  ],\n  \"OutputItems\": [\n    {\n      \"Uri\": \"scm_oil_industry/diesel.item\",\n      \"Count\": 1.0\n    }\n  ],\n  \"ResearchUri\": \"base/iron_smelting.research\"\n}\n</code></pre> <ul> <li>TargetUri: Path of the industry's <code>.recipe</code> target asset.</li> <li>Duration: Time to produce one item.</li> <li> <p>InputItems (Array): Shows the items and the quantity of each required to produce products.</p> <ul> <li>Uri: Path of the <code>.item</code> asset.</li> <li>Count: Required quantity of the item.</li> </ul> </li> <li> <p>OutputItems (Array): How many products are produced with the input items.</p> <ul> <li>Uri: Path of the <code>.item</code> asset.</li> <li>Count: Quantity of the item produced.</li> </ul> </li> <li> <p>ResearchUri: Path of the <code>.research</code> asset that allows the building to be researched to make it available in game.</p> </li> </ul>"},{"location":"guides/content-mods/creating-a-small-production-chain/#products-item-asset","title":"Products (<code>.item</code> asset)","text":"<p>Items are the products that buildings require or generate.</p> <p></p> <pre><code>{\n  \"IsLiquid\": false,\n  \"Color\": \"353535\",\n  \"MeshUri\": \"scm_oil_industry/crude_barrel.obj\",\n  \"ConveyorLength\": 0.3,\n  \"Weight\": 0.5\n}\n</code></pre> <ul> <li>IsLiquid: Specifies if the item is liquid. For now all items are set to false because liquid loads are not yet implemented in the game.</li> <li>Color: Hexadecimal value of the color that represents the item in the pop-ups.</li> <li>MeshUri: <code>.obj</code> file used to represent the item.</li> <li>ConveyorLength: This value represents the size of the item on the conveyor. If the value is too high, the items will either overlap each other or run off the sides of the conveyor.</li> <li>Weight: Weight of one unit item.</li> </ul>"},{"location":"guides/content-mods/creating-a-small-production-chain/#storing-resources-and-products-warehouse-asset","title":"Storing resources and products (<code>.warehouse</code> asset ):","text":"<p>Warehouses allow items be stored so that certain buildings and vehicles can use them. Stores cannot be supplied directly from a warehouse. They require a <code>.capacities</code>, <code>.heapcapacities</code>, or <code>.stackcapacities</code> asset in order to accept load.</p> <p></p> <pre><code>{\n  \"ResearchUri\": \"scm_oil_industry/refined_diesel.research\",\n  \"Size\": {\n    \"X\": 3,\n    \"Y\": 3,\n    \"Z\": 3\n  },\n  \"Liveries\": {\n    \"default\": {\n      \"MeshUri\": \"scm_oil_industry/diesel_tank.obj\",\n      \"MeshVariant\": null,\n      \"Lights\": null\n    }\n  },\n  \"Price\": 28000.0,\n  \"RunningCosts\": null,\n  \"Hidden\": false\n}\n</code></pre> <ul> <li>ResearchUri: Path of the <code>.research</code> asset that allows the building to be researched to make it available in game.</li> <li>Size (Array): Building size on X, Y, Z axes.</li> <li>Liveries (Array): Specifies the path of the building's <code>.obj</code> file. For more information about this section read the guide: Creating your first building mod.</li> <li>Price: Building purchase price.</li> <li>RunningCosts: Building maintenance cost. By default the value is <code>null</code>.</li> <li>Hidden: Indicates whether or not the building appears in the mine construction menu. By default the value is false.</li> </ul>"},{"location":"guides/content-mods/creating-a-small-production-chain/#stores-house-asset","title":"Stores (<code>.house</code> asset ):","text":"<p>Stores are the end of the production chain and demand products that are paid depending on supply and demand. With town or city growth, stores from time to time will increase in level and  the quantity of products they demand. If demand is low and too much cargo is delivered, prices will drop and if demand is very high but we do not cover it, prices will rise but there is a risk that the business will go bankrupt and close.</p> <p></p> <pre><code>{\n  \"PopulationRange\": [1, 1],\n  \"CanHaveDemand\": true,\n  \"Size\": {\n    \"X\": 7,\n    \"Y\": 2,\n    \"Z\": 5\n  },\n  \"Liveries\": {\n    \"default\": {\n      \"MeshUri\": \"scm_oil_industry/gas_station.obj\",\n      \"MeshVariant\": null,\n      \"Lights\": null\n    },\n    \"default_night_1\": {\n      \"MeshUri\": \"scm_oil_industry/gas_station.obj\",\n      \"MeshVariant\": \"night_1\",\n      \"Lights\": null\n    }\n  },\n  \"Price\": 33000.0,\n  \"RunningCosts\": null,\n  \"Hidden\": false\n}\n</code></pre> <ul> <li>PopulationRange: Specifies the population range that the building provides to the city when the city generates the store. It shows the minimum and maximum value of the population that it can have.</li> <li>CanHaveDemand: Specifies if the building can demand products.</li> <li>Size: Building size in X, Y, Z axes.</li> <li>Liveries (Array): Specifies the path of the building's ,obj file. For more information about this section read the guide: Creating your first building mod.</li> <li>Price: It is the price of the building, in this case the demolition price.</li> <li>RunningCosts: This is the operative cost of the building. As it is a city building, it has no effect on the player's finances. It is <code>null</code> value iby default.</li> <li>Hidden: This parameter indicates whether the object will appear in the game or in menus as buildable asset in the player's menu. Hidden assets can still be visible in game, e.g. locomotives in recipes.</li> </ul>"},{"location":"guides/content-mods/creating-a-small-production-chain/#selling-products-citydemandrecipe-asset","title":"Selling products (<code>.citydemandrecipe</code> asset ):","text":"<p>This asset allows city stores to request a demand for products.</p> <pre><code>{\n  \"ParentUri\": null,\n  \"BuildingUri\": \"scm_oil_industry/gas_station.house\",\n  \"ItemUri\": \"scm_oil_industry/diesel.item\",\n  \"Tier\": 2,\n  \"Demand\": null,\n  \"DemandMultiplier\": 2.0,\n  \"Price\": null,\n  \"PriceMultiplier\": null\n}\n</code></pre> <ul> <li>ParentUri: Path of the <code>.citydemandrecipe</code> asset if the demanded product requires other. For example, advanced wood frames require wood frames.</li> <li>BuildingUri: Path to the store's <code>.house</code> asset.</li> <li>ItemUri: Path of the <code>.item</code> asset of the product you are requesting.</li> <li>Tier: Store level is required to request the product. As with tiers of deposits, a tier 0 will appear at a starting point in the game with no research. A tier 1 will only appear after a tier 0 is receives demand within a town/city, and so on with each tier. If a tier 1 is active in a town/city, no new tier 0 stores will appear.</li> <li>Demand: Quantity of product demand. By default the value is <code>null</code>.</li> <li>DemandMultiplier: Multiplier of demand for the product. By default the value is <code>null</code>.</li> <li>Price: Price paid for one unit of product. If the value is <code>null</code> the game will calculate the price depending on the inflation.</li> <li>PriceMultiplier: Price multiplier.</li> </ul>"},{"location":"guides/content-mods/creating-a-small-production-chain/#researching-the-new-industry-research-asset","title":"Researching the new industry (<code>.research</code> asset ):","text":"<p>Like other types of buildings in the game, industries can be researched to make them available in the game. Researches may requiere a quantity of money or a number of items that must be delivered to the laboratories, some researches only become unlocked after previous reserch.</p> <p></p> <pre><code>{\n  \"ParentResearchUris\": [\n    \"base/research_and_development.research\"\n  ],\n  \"Tier\": 2,\n  \"Days\": 100,\n  \"DaysMultiplier\": null,\n  \"PricePerDay\": null,\n  \"PricePerDayMultiplier\": null,\n  \"ItemsPerDay\": [\n    {\n      \"Uri\": \"base/iron_bar.item\",\n      \"Count\": null,\n      \"CountMultiplier\": null\n    }\n  ],\n  \"CompletedByDefault\": false,\n  \"Hidden\": false,\n  \"Goal\": false\n}\n</code></pre> <ul> <li>ParentResearchUris (Array): This is a list with the paths of all the <code>.research</code> assets of the research on which it depends.</li> <li>Tier: Research level.</li> <li>Days: Number of days required to complete the research.</li> <li>DaysMultiplier: Multiplier of the number of days required to complete the research.</li> <li>PricePerDay: Daily amount of money used to complete the research.</li> <li>PricePerDayMultiplier: Multiplier of daily amount of money used to complete the research.</li> <li>ItemsPerDay (Array): Amount of items that must be delivered per day for research.<ul> <li>Uri: Path of the <code>.item</code> asset required for research.</li> <li>Count: Quantity of items required.</li> <li>CountMultiplier: Required item quantity multiplier.</li> </ul> </li> <li>CompletedByDefault: Specifies whether or not the research is completed from the beginning of the game.</li> <li>Hidden: Specifies whether or not the research is hidden in the game.</li> <li>Goal: Specifies if the research should display the game complete screen after the research ends.</li> </ul> <p>That's it!</p>"},{"location":"guides/content-mods/creating-a-small-production-chain/#further-reading","title":"Further reading","text":"<ul> <li>How to publish your mod</li> </ul>"},{"location":"guides/content-mods/creating-vehicle-interior/","title":"Creating a vehicle interior/cockpit","text":"<p>This guide is authored by Voxel Tycoon community member scailman</p>"},{"location":"guides/content-mods/creating-vehicle-interior/#introduction","title":"Introduction","text":"<p>This feature allows the camera to be positioned inside the vehicle in Ride Your Vehicle mode, giving the impression of traveling within the vehicle. This feature is optional. If a vehicle lacks a custom interior configuration, the game will use the default setup.</p>"},{"location":"guides/content-mods/creating-vehicle-interior/#modeling","title":"Modeling","text":""},{"location":"guides/content-mods/creating-vehicle-interior/#interior-mesh","title":"Interior mesh","text":"<p>The mesh representing the interior should be slightly smaller than the vehicle's exterior model and include visible external elements like the front of locomotives, boilers, chimneys, railings, etc.</p> <p></p> <ul> <li>Windows should be simple openings in the mesh, positioned and sized identically to the windows in the vehicle's model.</li> <li>Exterior faces that are not visible from the interior can be removed to reduce the polygon count.</li> <li>Depending on the type of vehicle, specific independent elements may be required, as detailed below.</li> </ul>"},{"location":"guides/content-mods/creating-vehicle-interior/#animated-sub-meshes","title":"Animated sub-meshes","text":"<p>For trucks, buses, and locomotives, additional animated sub-meshes (optional) can be included to add detail to the interior.</p> <p></p> <p>Optional elements include:</p> <ul> <li>Steering wheel</li> <li>Brake pedal</li> <li>Accelerator pedal</li> <li>Speed dial needle</li> <li>Combined accelerator and brake control</li> </ul> <p>These sub-meshes should be modeled with their center or pivot at position <code>(0,0,0)</code>.</p> <p>Tip</p> <p>You can place these elements in a common folder inside your mod for easy organization and reuse across multiple interiors.</p>"},{"location":"guides/content-mods/creating-vehicle-interior/#carunittrainunit-asset-configuration","title":"<code>.carunit</code>/<code>.trainunit</code> asset configuration","text":"<p>This section details the parameters and sections required to enable the interior view of a vehicle.</p>"},{"location":"guides/content-mods/creating-vehicle-interior/#interior-section","title":"<code>Interior</code> section","text":"<p>Defines the various sub-meshes, their positions, and the vehicle's interior mesh.</p> <pre><code>\"Interior\": {\n    \"Submeshes\": [\n        {\n            \"SteerAnimation\": {\n                \"PositionX\": { \"0\": -0.202 },\n                \"PositionY\": { \"0\": 0.55 },\n                \"PositionZ\": { \"0\": 0.369 },\n                \"RotationX\": { \"0\": 50.0 },\n                \"RotationZ\": { \"0\": 400.0, \"1\": -400.0 }\n            },\n            \"MeshUri\": \"base/steering_wheel.obj\"\n        },\n        {\n            \"BrakeAnimation\": {\n                \"PositionX\": { \"0\": -0.227 },\n                \"PositionY\": { \"0\": 0.422 },\n                \"PositionZ\": { \"0\": 0.445 },\n                \"RotationX\": { \"0\": 0.0, \"1\": -45.0 }\n            },\n            \"MeshUri\": \"base/pedal.obj\"\n        },\n        {\n            \"PowerAnimation\": {\n                \"PositionX\": { \"0\": -0.178 },\n                \"PositionY\": { \"0\": 0.422 },\n                \"PositionZ\": { \"0\": 0.445 },\n                \"RotationX\": { \"0\": 0.0, \"1\": -45.0 }\n            },\n            \"MeshUri\": \"base/pedal.obj\"\n        },\n        {\n            \"VelocityAnimation\": {\n                \"PositionX\": { \"0\": -0.067 },\n                \"PositionY\": { \"0\": 0.52 },\n                \"PositionZ\": { \"0\": 0.398 },\n                \"RotationX\": { \"0\": 0.0 },\n                \"RotationZ\": { \"0\": 0.0, \"0.25\": -75, \"0.5\": -150, \"0.75\": -225, \"1\": -300.0 }\n            },\n            \"MeshUri\": \"base/needle.obj\"\n        }\n    ],\n    \"PowerAndBrakeAnimation\": null,\n    \"HideExterior\": false,\n    \"MeshUri\": \"base/gasoline_bus_interior.obj\"\n}\n</code></pre> <p>Each sub-mesh is defined by its animation type: <code>SteerAnimation</code>, <code>BrakeAnimation</code>, <code>PowerAnimation</code>, <code>VelocityAnimation</code>, and <code>PowerAndBrakeAnimation</code>.</p> <ul> <li>PositionX, PositionY, PositionZ specify the position of each element inside the vehicle.</li> <li>RotationX, RotationY, RotationZ define the rotation of each element depending on the rotation axis.</li> </ul> <p>For the steering wheel, two keys specify the maximum turn degrees to the left and right. For the speed dial needle, additional keys can be added for smoother movement.</p> <ul> <li>MeshUri specifies the file path of each element's <code>.obj</code> file.</li> </ul> <p>In the Interior section, two parameters are defined:</p> <ul> <li>HideExterior: Determines whether the vehicle's exterior mesh is hidden in interior view.</li> <li>MeshUri: Specifies the path to the vehicle interior\u2019s <code>.obj</code> file.</li> </ul>"},{"location":"guides/content-mods/creating-vehicle-interior/#cameraspots-section","title":"<code>CameraSpots</code> section","text":"<p>Specifies the camera positions for the interior view when traveling in first-person. If no camera positions are specified, the game will use the default three positions when traveling in a vehicle.</p> <p>Each subsection includes:</p> <p></p> <ul> <li>Position: Array defining the camera\u2019s position.</li> <li>Rotation: Initial camera rotation in degrees. A value of 0.0 indicates the camera is facing forward.</li> <li>ShowInterior: Specifies whether the interior mesh is displayed at that camera position.</li> </ul>"},{"location":"guides/content-mods/creating-vehicle-interior/#finishing-touches","title":"Finishing touches","text":"<p>To add realism to the interior view, once the interior is modeled and configured, colors can be set in the Asset Editor to emit a bit of light at night, giving the impression of interior lighting. Set the Emission slider to a value of 125 for this effect.</p> <p></p> <p>Also, don\u2019t forget to add the <code>With interior</code> tag to the mod.json before publishing an update to your mod.</p>"},{"location":"guides/content-mods/creating-your-first-building-mod/","title":"Creating your first building mod","text":"<p>This guide is authored by Voxel Tycoon community member scailman</p>"},{"location":"guides/content-mods/creating-your-first-building-mod/#introduction","title":"Introduction","text":"<p>This guide tries to show the basic steps to create a mod that adds new buildings in the city generation in Voxel Tycoon (as per <code>v0.80</code>).</p> <p>The guide is not intended to teach you modeling, so you must have a basic understanding of 3DS Max, Blender, Wings 3D, or any other program you want to use that allows you to import and export <code>.obj</code> files.</p>"},{"location":"guides/content-mods/creating-your-first-building-mod/#modeling-suggestions","title":"Modeling suggestions","text":"<p>As in all games, there are certain recommendations that must be followed when creating a 3d model.</p> <ul> <li>The size of the building should not exceed 5x5x10m.</li> <li>The model must have the minimum details that make it recognizable but without overloading the model.</li> <li>The colors have to be pastel colors so that match the same style as the rest of the buildings in the game.</li> <li>Use dark tones for windows. I recommend the value <code>#272727 (RGB 39,39,39)</code>.</li> </ul>"},{"location":"guides/content-mods/creating-your-first-building-mod/#basic-concepts-when-modeling-a-building","title":"Basic concepts when modeling a building","text":"<p>When starting the creation of a building, it is a good idea to think about what type of building we want to represent and what size it will have. A good recommendation is to import a building similar to the base game buildings on the size of our model. A good practice is to start with a grid with the size of the building we want to make. See the following image.</p> <p></p> <p>Each grid represents a 1x1 meter that matches a voxel in the game. Taking these dimensions into account, we know that the building must not exceed these limits when creating it. The building can have as many parts as it can be, but when we export it to the game, it is recommended that there be only one single object that conforms to the entire building. The coordinate axis must be located at <code>0,0,0</code>, although then the building is not centered with respect to the plane that we have used as a reference to define the size. This must be taken into account so that the building does not overlap with the roads or other buildings.</p> <p></p> <p>The position of the main facade is important so that once the building is already in the game, it appears correctly located next to the roads and as a reference to the dimensions of the base of the building that we will have to configure later. In this case, the X-axis is the main facade of the building and measures 6m and the Z-axis is the bottom of the building and measures 4m. The axis orientation may vary depending on the 3d program being used, which in this case is 3ds max.</p>"},{"location":"guides/content-mods/creating-your-first-building-mod/#texturing-the-building","title":"Texturing the building","text":"<p>VT texturing is very basic, it uses a 64x64 pixel square texture divided into different squares in which each unit will represent a color when the building is exported.</p> <p></p> <p>This base texture can be found in the folder `Content/your_first_pack\" where the game is installed. Once this texture has been applied to the model, we can start creating the unwrap separating all the polygons of the model depending on the color that we want them to have once it is finished.</p> <p></p> <p>This is how the building unwrap should look depending on the number of colors we are going to use. For the night effect of the windows, in case the building has windows, the windows must be separated in different colors in the unwrap since they will be the different variations of windows lit at night. In the previous image, the unwrap has been created so that the building has three variations of night windows. Later we will explain how to create the necessary settings so that the windows appear lit at night.</p>"},{"location":"guides/content-mods/creating-your-first-building-mod/#building-export","title":"Building export","text":"<p>Once we have the finished model, we can always export it to the game in <code>.obj</code> format. For now, it is only a simple 3d model but later we will configure the necessary files so that the game recognizes it and can generate our building in the cities. All mods must be contained in the folder <code>Content/&lt;mod_name&gt;</code>. For convenience and order, it's recommended to follow the same directory structure that the game uses and that can be verified by opening the folder <code>Content/base</code>.</p>"},{"location":"guides/content-mods/creating-your-first-building-mod/#building-settings-house-asset","title":"Building settings (<code>.house</code> asset)","text":"<p>In order for the game to recognize that we have created a building, we must create or copy the .house file of any existing building and modify the necessary parameters. This file is located in the folder <code>Content/base/houses</code>.</p> <p>To edit the game files we only need a text editor such as Notepad ++, or Visual Studio Code. I highly recommend VS Code as you can compare side by side.</p> <pre><code>{\n  \"PopulationRange\": [8, 12],\n  \"CanHaveDemand\": false,\n  \"Size\": {\n    \"X\": 6,\n    \"Y\": 4,\n    \"Z\": 4\n  },\n  \"Liveries\": {\n    \"default\": {\n      \"MeshUri\": \"arab_buildings/arab_house5_desert.obj\",\n      \"MeshVariant\": null,\n      \"Lights\": null\n    },\n    \"default_night_1\": {\n      \"MeshUri\": \"arab_buildings/arab_house5_desert.obj\",\n      \"MeshVariant\": \"night_1\",\n      \"Lights\": null\n    },\n    \"default_night_2\": {\n      \"MeshUri\": \"arab_buildings/arab_house5_desert.obj\",\n      \"MeshVariant\": \"night_2\",\n      \"Lights\": null\n    },\n    \"default_night_3\": {\n      \"MeshUri\": \"arab_buildings/arab_house5_desert.obj\",\n      \"MeshVariant\": \"night_3\",\n      \"Lights\": null\n    }\n  },\n  \"Price\": 8800.0,\n  \"RunningCosts\": null,\n  \"Hidden\": false\n}\n</code></pre> <p>This is what the <code>.house</code> asset file looks like and contains the following parameters:</p> <ul> <li>PopulationRange: Indicates the maximum and minimum population that the building will have when the city generates it.</li> <li> <p>CanHaveDemand (<code>true</code>/<code>false</code>): This parameter indicates if it can request a product, as is the case in stores. In the rest of the buildings, the value is false.</p> </li> <li> <p>Size: Specifies the size of the building. These are the values we use in the reference plane. For the value of Y, the height, we must always round up, for example, if our building measures 2.4m (2.4 voxels) we must always indicate a value of 3.</p> </li> <li> <p>Liveries: In this parameter, the path of the mesh of our building that we exported previously is indicated. Note that the first part of MeshUri (arab_buildinhgs), is the name of our mod followed by the name of the <code>.obj</code> file.</p> <ul> <li> <p>default_night_1(..3): is the name of the different liveries to show the windows lit at night.     There are three liveries that match the unwrap of the model.</p> </li> <li> <p>MeshVariant: Indicates the name of the variant specified in the <code>.obj.meta</code> file that defines the colors of the model that we will explain later.</p> </li> </ul> </li> <li> <p>Price: It is the price of the building, in this case, the demolition price.</p> </li> <li> <p>RunningCosts: It is the operating cost of the building. As it is a city building, it has no effect on the player's finances. A null value indicates that loc automatically calculates the game.</p> </li> <li> <p>Hidden (<code>true</code>/<code>false</code>); This parameter indicates whether the object will appear in the game or in menus as a buildable asset in the player's menu. Hide assets are still visible in-game, eg. locomotives in recipes.</p> </li> </ul>"},{"location":"guides/content-mods/creating-your-first-building-mod/#building-settings-citybuildingspawninfo-asset","title":"Building settings (<code>.citybuildingspawninfo</code> asset)","text":"<p>This file tells the game how our building should generate when a city grows.</p> <pre><code>{\n  \"Uri\": \"arab_buildings/arab_house5.house\",\n  \"ProportionalCount\": 50,\n  \"Density\": 0.0,\n  \"Biomes\": [\n    \"arab_buildings/desert2.biome\"\n  ]\n}\n</code></pre> <ul> <li>Uri: It is the path of the .house file that we explained previously.</li> <li>ProportionalCount: It is the proportion in which the building will appear with respect to the total number of buildings in the city.</li> <li>Density: Density of buildings in the city of this type.</li> <li>Biomes: This parameter indicates in which specific biome the building should appear. If the value is \"null\", the building will appear in all biomes, but if a biome is specified, the building will only appear in that biome as the buildings in the Arctic biome.</li> </ul>"},{"location":"guides/content-mods/creating-your-first-building-mod/#asset-editor","title":"Asset Editor","text":"<p>The asset editor integrated into the game and accessible from the main menu, allows us to modify the colors of any asset in the game. In it, we will look for the building that we have created.</p> <p></p> <p>The first time we access our building it will appear in gray color. This means you don't have a color palette assigned yet. To create a color palette we must click on Generate Palette and the model will now have the colors of the reference image that we used when creating the unwrap.</p> <p></p> <p>To assign colors, we simply have to click on the different parts of the building that will be highlighted as we move the mouse over it and select a color in the window that appears on the right. To specify a specific color that we already have defined, you can enter the hexadecimal value of the color. The different bars that appear below the color picker allow you to add brightness to the material or not to be affected by light at night, making it have the effect of lighting.</p> <p></p> <p>Once we have finished applying the colors, the building will look like this.</p> <p>The different colors of the palette are saved in the <code>.obj.meta</code> file and contain the different variants that indicate what color and properties should be replaced for the effect of illuminated windows.</p> <pre><code>{\n  \"Materials\": [\n\n    // ...skipping a few colors here to to simplify the example...\n\n    {\n      \"Color\": \"ffde9f\",\n      \"Glassiness\": 0.0,\n      \"Specular\": 0.0,\n      \"Smoothness\": 0.0,\n      \"Emission\": 0.0\n    },\n    {\n      \"Color\": \"a78466\",\n      \"Glassiness\": 0.0,\n      \"Specular\": 0.0,\n      \"Smoothness\": 0.0,\n      \"Emission\": 0.0\n    },\n    {\n      \"Color\": \"c0c199\",\n      \"Glassiness\": 0.0,\n      \"Specular\": 0.0,\n      \"Smoothness\": 0.0,\n      \"Emission\": 0.0\n    },\n    {\n      \"Color\": \"6a5341\",\n      \"Glassiness\": 0.0,\n      \"Specular\": 0.0,\n      \"Smoothness\": 0.0,\n      \"Emission\": 0.0\n    }\n  ],\n  \"Variants\": {\n    \"night_1\": {\n      \"8\": {\n        \"Color\": \"aa9d68\",\n        \"Glassiness\": 0.0,\n        \"Specular\": 0.0,\n        \"Smoothness\": 0.0,\n        \"Emission\": 1.0\n      }\n    },\n    \"night_2\": {\n      \"9\": {\n        \"Color\": \"aa9d68\",\n        \"Glassiness\": 0.0,\n        \"Specular\": 0.0,\n        \"Smoothness\": 0.0,\n        \"Emission\": 1.0\n      }\n    },\n    \"night_3\": {\n      \"10\": {\n        \"Color\": \"aa9d68\",\n        \"Glassiness\": 0.0,\n        \"Specular\": 0.0,\n        \"Smoothness\": 0.0,\n        \"Emission\": 1.0\n      }\n    }\n  }\n}\n</code></pre> <p>The code above shows the color palette of the example building. We skipped some colors at the beginning because the listing would be too large but you can see the section of the variants. In the variants section, the names of the three variants are defined for the night windows that appeared in the <code>.house</code> file named <code>night_1 - 3</code>. In this case, the values 8, 9, 10 correspond to the colors in the upper section which are the ones to be replaced by the colors and parameters of the Variants section. To know what values you have to specify, the colors range from 0 to 15 (16 in total) but the easy way to find the correct colors is by the hexadecimal value. If color <code>#272727</code> was used, all colors with this value represent windows. Another parameter that can identify the windows in the Glossiness parameter, which in the rest of the colors will be <code>0.0</code>.</p>"},{"location":"guides/content-mods/creating-your-first-building-mod/#localization-strings-asset","title":"Localization (<code>.strings</code> asset)","text":"<p>The location file allows indicating the name that will be shown in the menus or in the new information tool (pre-alpha 0.80) of the building.</p> <pre><code>{\n  \"LocaleUri\": \"base/en.locale\",\n  \"Items\": {\n    \"arab_buildings/desert2.biome#DisplayName\": \"Desert\",\n    \"arab_buildings/palm_tree.plant#DisplayName\": \"Palm tree\",\n    \"arab_buildings/arab_house1.house#DisplayName\": \"House 1\",\n    \"arab_buildings/arab_house2.house#DisplayName\": \"House 2\",\n    \"arab_buildings/arab_house3.house#DisplayName\": \"House 3\",\n    \"arab_buildings/arab_house4.house#DisplayName\": \"House 4\",\n    \"arab_buildings/arab_house5.house#DisplayName\": \"House 5\",\n    \"arab_buildings/arab_obelisc_desert.house#DisplayName\": \"Obelisk\",\n    \"arab_buildings/arab_store.house#DisplayName\": \"Store\",\n    \"arab_buildings/arab_watertower.house#DisplayName\": \"Water tower\",\n    }\n}\n</code></pre> <p>The image shows that the indicated <code>LocaleUri</code> language is English and in the Items section the path of all the files of the different objects created is specified, in this case several buildings (<code>.house</code>), a biome (<code>.biome</code>) and a plant (<code>.plant</code>).</p> <p>You can have as many <code>.strings</code> files as languages you want to have in the mod.</p>"},{"location":"guides/content-mods/creating-your-first-building-mod/#publishing-the-mod","title":"Publishing the mod","text":"<p>Once you have finished modeling the building, configuring the different files and applying the color palette, all you have to do is create an image of the mod (<code>preview.png</code>) that will be shown in the mod finder and that must have dimensions of 512x512 pixels. It is also necessary to create a <code>mod.json</code> file where the description of the mod is specified and which in turn allows the mod to appear in the mod selection window when creating a new game.</p> <pre><code>{\n    \"Title\" : \"Adobe buildings V1.0\",\n    \"Description\" : \"This mod add new desert biome and 8 specific buildings for this biome.\n\n    Buildings:\n    - 5 different residential  houses\n    - 1 shop for all base game items\n    - 1 obelisk\n    - 1 Water tower\n\n    Biomes:\n    - Desert with palm trees\n\n    Localization: bg, de, en, es, fr, it, nl, pl, pt, ru, tr, uk.\n\n    Changelog:\n    -Release.\n\n    Version: 1.0.\"\n }\n</code></pre>"},{"location":"guides/content-mods/creating-your-first-building-mod/#further-reading","title":"Further reading","text":"<ul> <li>How to publish your mod</li> <li>Creating your first locomotive mod</li> </ul>"},{"location":"guides/content-mods/creating-your-first-locomotive-mod/","title":"Creating your first locomotive mod","text":"<p>This guide is authored by Voxel Tycoon community member scailman</p>"},{"location":"guides/content-mods/creating-your-first-locomotive-mod/#introduction","title":"Introduction","text":"<p>This guide tries to show you how to create a locomotive for use in Voxel Tycoon.</p> <p>In Voxel Tycoon you can create steam, diesel or electric locomotives, but in this guide we will focus on creating an electric locomotive. The guide is not intended to teach you modeling, so you must have a basic understanding of 3DS Max, Blender, Wings 3D, or any other program you want to use that allows you to import and export <code>.obj</code> files.</p>"},{"location":"guides/content-mods/creating-your-first-locomotive-mod/#modeling-suggestions","title":"Modeling suggestions","text":"<p>As in all games, there are certain recommendations that must be followed when creating a 3d model.</p> <p>Apart from city buildings, trains and trucks are one of the most repeated assets in the game, and to avoid performance problems there are certain recommendations to follow.</p> <ul> <li>It's recommended that the body of the locomotive does not exceed 1500 triangles.</li> <li>The bogies and wheels should have a maximum of 1000 triangles since it's not as visible parts as the locomotive body.</li> <li>Make the necessary details so that the locomotive is recognizable but not overloaded.</li> <li>VT models are shorter than in real life.</li> <li>Depending on the type of locomotive you want to make, it's a good idea to import a model from the base game to compare the measurements and, in case of being an electric locomotive, have a reference of the height of the overhead wire for pantographs.</li> </ul>"},{"location":"guides/content-mods/creating-your-first-locomotive-mod/#setting-the-model-in-the-3d-modeling-software","title":"Setting the model in the 3D modeling software","text":"<p>Vehicles are made up of different parts. In the case of trains, they are usually made up of  the body of the locomotive, bogies, and wheels. Steam locomotives also have several rods depending on their complexity.</p> <p>All the elements that make up a vehicle must have the coordinate axis in position <code>0,0,0</code>, as shown in the following image:</p> <p></p> <p>While creating the model of  the locomotive, we can place each part in place to verify that the proportions are correct, but when exporting the model, each part must be placed as in the previous image.</p> <p>Important</p> <p>The locomotive should be placed facing the front to the right (view left in the viewport in 3ds max. In other programs, the placement of the viewports may vary). </p> <p>Texturing the model is done in the same way as a building. For this, I recommend reading the guide Creating your first content mod.</p>"},{"location":"guides/content-mods/creating-your-first-locomotive-mod/#exporting-the-locomotive","title":"Exporting the locomotive","text":"<p>Like any asset in VT, it must be exported in <code>.obj</code> format, and the files must be contained in <code>Content/&lt;mod_name&gt;</code>. It's recommended to create the same directory structure that uses the base game for convenience.</p> <p>Each part of the locomotive must be a single <code>.obj</code> file that will then be linked through the different configuration asset files that will be explained below.</p>"},{"location":"guides/content-mods/creating-your-first-locomotive-mod/#axles-setting-trainaxle-asset","title":"Axles setting (<code>.trainaxle</code> asset)","text":"<p>This file is used to define the wheels of the locomotive. There is no limit to the number of axles that a locomotive or bogie can use, and each one can be a different size as in steam locomotives.</p> <p>The file contains only two parameters:</p> <pre><code>{\n  \"MeshUri\": \"spanish_pack/class1_axle.obj\",\n  \"WheelRadius\": 0.185\n}\n</code></pre> <ul> <li>MeshUri: This parameter specifies the path where the axis <code>.obj</code> file is located. The first part of the path is the mod folder.</li> <li>WheelRadius: This parameter is the radius of the wheel that we can obtain from the 3d program.</li> </ul>"},{"location":"guides/content-mods/creating-your-first-locomotive-mod/#bogie-settings-trainbogie-asset","title":"Bogie settings (<code>.trainbogie</code> asset )","text":"<p>Locomotives may or may not have bogies in real life, but it must always be defined in the game.</p> <p>This is what the .trainbogie asset looks like:</p> <pre><code>{\n  \"MeshUri\": \"spanish_pack/class269_bo.obj\",\n  \"AxleOffset\": 0.113,\n  \"Axles\": [\n    {\n      \"Uri\": \"spanish_pack/class269_axle.trainaxle\",\n      \"Offset\": 0.316\n    },\n    {\n      \"Uri\": \"spanish_pack/class269_axle.trainaxle\",\n      \"Offset\": -0.316\n    }\n  ]\n}\n</code></pre> <p>A bogie is made up of the mesh of the bogie itself and a section (axles) that define the type of axis and the position inside the bogie.</p> <p>A bogie can have from 1 to n specified axes.</p> <p></p> <ul> <li>MeshUri: Specifies the path of the bogie mesh file. If the value is null, it means that the bogie has no mesh.</li> <li>Uri: Specifies the path of the axis .trainaxle file that we explained in the previous point. If the value is null, the wheel mesh will not appear.</li> <li>AxleOffet: Specify the axis position.</li> <li>Offset: Defines the axle position along the Z-axis of the bogie. A positive value means that it is the front wheel of the bogie and a negative value that is the rear wheel.</li> </ul>"},{"location":"guides/content-mods/creating-your-first-locomotive-mod/#engine-settings-trainunit-asset","title":"Engine settings  (<code>.trainunit</code> asset )","text":"<p>This is the main file of the locomotive and where the rest of assets are linked. Many assets can be customized, including the sounds (which we will not explain in this guide).</p> <p>The <code>.trainunit</code> asset has several sections and parameters and looks like the following on an electric locomotive.</p> <p>Some sections are null, that means it hasn't been specified, or that this parameter is automatically calculated by the game.</p> <pre><code>{\n  \"Smokes\": null,\n  \"Bogies\": [\n    {\n      \"Uri\": \"spanish_pack/class1_bo.trainbogie\",\n      \"Offset\": 0.643,\n      \"Anchor1\": true,\n      \"Anchor2\": false,\n      \"Secondary\": false\n    },\n    {\n      \"Uri\": \"spanish_pack/class1_bo.trainbogie\",\n      \"Offset\": -0.597,\n      \"Anchor1\": false,\n      \"Anchor2\": true,\n      \"Secondary\": false\n    }\n  ],\n  \"AudioUri\": \"base/electric.trainaudio\",\n  \"Type\": \"Electric\",\n  \"Length\": null,\n  \"VelocityLimit\": 40.0,\n  \"Power\": 160,\n  \"Weight\": 30,\n  \"Price\": null,\n  \"PriceMultiplier\": null,\n  \"RunningCosts\": null,\n  \"RunningCostsMultiplier\": null,\n  \"Liveries\": [\n    {\n      \"MeshUri\": \"spanish_pack/class1a.obj\"\n    }\n  ],\n  \"Coupling1Uri\": \"base/common.traincoupling\",\n  \"Coupling2Uri\": \"base/common.traincoupling\",\n  \"Hidden\": true,\n  \"Submeshes\": null,\n  \"AnimationReferenceWheelRadius\": null,\n  \"ResearchUri\": null,\n  \"Explosive\": false,\n  \"ExplosionForce\": null\n}\n</code></pre> <ul> <li>Smoke: Specifies the position of the smoke in diesel and steam locomotives.</li> <li>Bogies (Array):</li> <li>Uri: Path of the .trainbogie asset.</li> <li>Anchor1: Used to indicate the position of the bogie. For example, if the locomotive has 3 bogies, the values \u200b\u200bof Anchor1 and Anchor2 will be: <code>true - false</code>, <code>false - false</code>, <code>false - true</code>.</li> <li>Anchor2: Used to indicate the position of the bogie. For example, if the locomotive has 2 bogies, the values \u200b\u200bof Anchor1 and Anchor2 will be: <code>true - false</code>, <code>false - true</code>.</li> <li>Offset: Bogie position respecting to the locomotive along the Z-axis. A positive value means it's the front bogie and a negative value the rear bogie.</li> <li>AudioUri: Path of the .trainaudio asset.</li> <li>Type: Locomotive type. Possible values: Steam, Diesel, Electric, Unpowered.</li> <li>Length: By default the value is null, the game automatically calculates the length of the locomotive using the boundingbox of the <code>.obj</code> file. When a value is specified, it is because we want the locomotive to overlap with another element as it happens with the semi-trailers of the trucks.</li> <li>VelocityLimit: Maximum locomotive speed specified in km / h.</li> <li>Power: Max engine power specified in Kw.</li> <li>Weight: Locomotive weight specified in Tonnes.</li> <li>Price: Locomotive cost. The default is null. The game calculates the price based on the power of the locomotive and economic fluctuations.</li> <li>PriceMultiplier: Locomotive cost price multiplier. By default is null.</li> <li>RunningCosts: Locomotive operating cost. By default is null.</li> <li>RunningCostsMultiplier: Locomotive operating cost multiplier. By default is null.</li> <li>Liveries (Array):</li> <li>MeshUri: Path of the <code>.obj</code> file of the locomotive body.</li> <li>Coupling1Uri: Path of the front locomotive <code>.traincoupling</code> asset.</li> <li>Coupling2Uri: Path of the rear locomotive <code>.traincoupling</code> asset. <p>Note: Only cars with the same couplings could be coupled.</p> </li> <li>Hidden: This parameter makes the locomotive not appear in the vehicle purchase menu. By default the value is <code>false</code>, but if the steam locomotive is articulated or requieres separate units (eg. Steam locomotive engine &amp; tender, or fixed car suburban/subway set), this value will be <code>true</code>.</li> <li>Submeshes (Array): This section specifies the different meshes and animation parameters of the meshes of the rods of steam locomotives (see Animating locomotive rods guide).</li> <li>AnimationReferenceWheelRadius: Specifies the radius that the connecting rods will follow in the locomotives that have connecting rods.</li> <li>ResearchUri: If the locomotive needs to be researched in order to use it, this parameter indicates the path of the .research asset.</li> <li>Explosive: This parameter causes the locomotive or vehicle to explode in the event of an accident causing damage to the surrounding area. By default the value is false.</li> <li>ExplosionForce: Force of the explosion caused in the event of an accident if the explosive parameter is <code>true</code>. Setting it too high can cause the blast to damage the terrain so much that it destroys cities and entire resource deposits.</li> </ul>"},{"location":"guides/content-mods/creating-your-first-locomotive-mod/#coupling-setting-traincouplig-asset","title":"Coupling setting (<code>.traincouplig</code> asset)","text":"<p>This asset allows defining a custom coupling for the locomotive that will make only locomotives and wagons that use the same coupling be able to be coupled.</p> <p>This asset does not contain any parameters, and the file is empty, but it must exist in order to function properly.</p>"},{"location":"guides/content-mods/creating-your-first-locomotive-mod/#train-recipe-settings-trainrecipe-asset","title":"Train recipe settings (<code>.trainrecipe</code> asset)","text":"<p>In the game we can define that locomotives or trains will form a consist that cannot be separated, or that multiple vehicles will be purchased at the same time - such as the steam locomotives that when we buy one in the game from the purchase menu from the depot, we buy the locomotive and the tender as a set.</p> <pre><code>{\n  \"Sections\": [\n    {\n      \"Count\": null,\n      \"MinCount\": null,\n      \"MaxCount\": 1,\n      \"Units\": [\n        {\n          \"Uri\": \"s_hst/hst1_eng_a.trainunit\",\n          \"Flipped\": false\n        }\n      ]\n    },\n    {\n      \"Count\": 0,\n      \"MinCount\": 2,\n      \"MaxCount\": 4,\n      \"Units\": [\n        {\n          \"Uri\": \"s_hst/hst1_car.trainunit\",\n          \"Flipped\": false\n        }\n      ]\n    },\n    {\n      \"Count\": null,\n      \"MinCount\": null,\n      \"MaxCount\": 1,\n      \"Units\": [\n        {\n          \"Uri\": \"s_hst/hst1_eng_b.trainunit\",\n          \"Flipped\": true\n        }\n      ]\n    }\n  ],\n  \"ResearchUri\": null,\n  \"Hidden\": false\n}\n</code></pre> <p>The file is divided into sections and you can indicate the number of minimum and maximum vehicles and what type a consist can have.</p> <p>In the file shown, it represents a consist of a train that contains a locomotive at the front, between 2 and 4 passenger cars and another locomotive at the rear.</p> <p></p> <p>The parameters of this asset are quite explanatory.</p> <p>They indicate the minimum and maximum number of vehicles that make up the composition, what type they are (.trainunit asset) and whether they are inverted or not, such as the case of the rear locomotive.</p> <ul> <li> <p>ResearchUri: If the consist or locomotive needs to be researched in order to use it, this parameter indicates the path of the .research asset.</p> </li> <li> <p>Hidden: This parameter makes the locomotive not appear in the vehicle purchase menu. By default the value is false, but if the steam locomotive is made up of the locomotive and the tender, this value will be true.</p> </li> </ul>"},{"location":"guides/content-mods/creating-your-first-locomotive-mod/#localization-strings-asset","title":"Localization (<code>.strings</code> asset)","text":"<p>The .strings asset specifies the text that will be displayed in severals windows and menus in the game.</p> <pre><code>{\n  \"LocaleUri\": \"base/en.locale\",\n  \"Items\": {\n    \"br_class05/steam_engine_6.trainunit#DisplayName\": \"Br Class 05 Engine\",\n    \"br_class05/steam_engine_6_tender.trainunit#DisplayName\": \"Br Class 05 Tender\",\n    \"br_class05/steam_engine_6.trainrecipe#DisplayName\": \"Br Class 05\"\n  }\n}\n</code></pre> <p>In this example, it's show the text of the name of the locomotive and the tender as separate units and the train set as it appears in the purchase menu window.</p> <p>You can have as many <code>.strings</code> assets as languages you want in the same folder.</p>"},{"location":"guides/content-mods/creating-your-first-locomotive-mod/#further-reading","title":"Further reading","text":"<ul> <li>How to publish your mod</li> <li>Animating locomotive rods</li> <li>Creating your first truck mod</li> </ul>"},{"location":"guides/content-mods/creating-your-first-truck-mod/","title":"Creating your first truck mod","text":"<p>This guide is authored by Voxel Tycoon community member scailman</p>"},{"location":"guides/content-mods/creating-your-first-truck-mod/#introduction","title":"Introduction","text":"<p>In this guide, we will see how to configure a truck with different types of loads and trailers.</p> <p>Basic knowledge of 3d design software is required as this guide will not cover the design part of the truck, only how to configure it to work properly in Voxel Tycoon.</p> <p></p> <p>The following will explain each type of asset that a truck uses, how to configure the different cargo types, and how to configure trailers and semi-trailers.</p>"},{"location":"guides/content-mods/creating-your-first-truck-mod/#prepare-a-model-for-export","title":"Prepare a model for export","text":"<p>Trucks, like trains, have several parts that must be positioned on the coordinate axis at <code>0,0,0</code> and exported independently. To learn how to texture the model, read the Creating your first building guide where the process is explained in detail.</p> <p></p> <p>This image shows the chassis position and both wheels, one single and one double.</p> <p>Important</p> <p>Like trains, trucks should also be facing the front to the right in the right viewport (Blender loads vehicles facing left), otherwise, the truck will appear in the wrong direction on the road.</p> <p>Once we have the chassis, and the wheels are textured and positioned correctly, we can explore each model in .obj format.</p>"},{"location":"guides/content-mods/creating-your-first-truck-mod/#wheels-caraxle-asset","title":"Wheels (<code>.caraxle</code> asset)","text":"<p>All road vehicles must have a minimum of two axles, one for the front wheels and one for the rear. If the model we are making is a trailer or semi-trailer, the front axle must exist but it doesn't have to be a visible wheel. The <code>.caraxle</code> asset has only two parameters and is as shown below:</p> <pre><code>{\n  \"WheelMeshUri\": \"scm_truck_pack/single_wheel.obj\",\n  \"WheelRadius\": 0.162\n}\n</code></pre> <ul> <li>WheelMeshUri: Specifies the path of the wheel's .obj file. If we don't want it to have a mesh, this parameter will be null.</li> <li>WheelRadius: Specifies the radius of the wheel that we can obtain from the 3d program. This value is important because if it is greater the wheel will appear overlapping the road and if it is less, the wheel will float above the road.</li> </ul>"},{"location":"guides/content-mods/creating-your-first-truck-mod/#truck-configuration-carunit-asset","title":"Truck configuration (<code>.carunit</code> asset)","text":"<p>The configuration of a truck is very similar to the configuration of a locomotive, only differing in the certain parameters specific to road vehicles vary.</p> <pre><code>{\n  \"Axles\": [\n    {\n      \"Uri\": \"scm_truck_pack/single_wheel.caraxle\",\n      \"Offset\": 0.545,\n      \"HalfTrack\": 0.344,\n      \"Steered\": true\n    },\n    {\n      \"Uri\": \"scm_truck_pack/double_wheel.caraxle\",\n      \"Offset\": -0.578,\n      \"HalfTrack\": 0.278,\n      \"Steered\": false\n    }\n  ],\n  \"AudioUri\": \"base/truck.caraudio\",\n  \"Type\": \"Diesel\",\n  \"Length\": null,\n  \"VelocityLimit\": 85.0,\n  \"Power\": 170.0,\n  \"Weight\": 4.2,\n  \"Price\": null,\n  \"PriceMultiplier\": null,\n  \"RunningCosts\": null,\n  \"RunningCostsMultiplier\": null,\n  \"Liveries\": [\n    {\n      \"MeshUri\": \"scm_truck_pack/hopper_truck.obj\"\n    }\n  ],\n  \"Coupling1Uri\": null,\n  \"Coupling2Uri\": \"scm_truck_pack/scm_dolly_coupling.carcoupling\",\n  \"Hidden\": false,\n  \"Submeshes\": null,\n  \"AnimationReferenceWheelRadius\": null,\n  \"ResearchUri\": \"scm_truck_pack/scm_trucks.research\",\n  \"Explosive\": false,\n  \"ExplosionForce\": null\n}\n</code></pre> <ul> <li>Axles (Array): Defines a list of vehicle axles.<ul> <li>Uri: Path of the .caraxle asset.</li> <li>Offset: Axle position with respect to the center of the vehicle along the Z-axis. The front axle will have a positive value and the rear axle a negative value.</li> <li>HalfTrack: Wheel position with respect to the X-axis of the vehicle. Positive values are always indicated. The game automatically reverses the value to position the other wheel on the opposite side of the vehicle.</li> <li>Steered: Indicates whether the wheels on that axle are steered. Specifying vehicles with steered rear axles causes the rear wheels to not behave properly in curves and ramps.</li> </ul> </li> <li>UriAudio: Path of the <code>.caraudio</code> asset.</li> <li>Type: Type of engine used by the vehicle. Possible values are Diesel, Gasoline, and Unpowered.</li> <li>Length: Vehicle length. By default the value is null but if it is a semi-trailer or trailer, the length must be specified because the semi-trailer has to overlap with the cab of the truck.  The green rectangle indicates the length to be specified in the semitrailer length configuration. Like other vehicles, &gt; semi-trailers should be centered on the coordinate axes using this length as a reference, not the total length of the semi-trailer.</li> <li>VelocityLimit: Vehicle max speed in km/h.</li> <li>Power: Maximum engine power of the vehicle in Kw.</li> <li>Weight: Vehicle weight in metric tons.</li> <li>Price: Price of the vehicle, by default the value is <code>null</code>, the game calculates the price based on the max power if powered and/or capacity.</li> <li>PriceMultiplier: Vehicle price multiplier.</li> <li>RunningCosts: Vehicle maintenance cost.</li> <li>RunningCostsMultiplier: Vehicle maintenance cost multiplier.</li> <li>Liveries (Array):<ul> <li>MeshUri: Path of the mesh file (.obj) of the vehicle.</li> </ul> </li> <li>Coupling1Uri, Coupling2Uri: Path of the <code>.carcoupling asset</code>. Trucks usually don't have couplings, the value of this parameter is <code>null</code> but if you want to put a semi-trailer or a dolly trailer, you must specify a front and/or rear couplings or both.</li> <li>Hidden: This parameter indicates whether or not the vehicle will be displayed in the vehicle purchase menu. A value <code>true</code> is usually set if the vehicle is made up of several parts and a <code>.carrecipe</code> asset has been created to display in the vehicle purchase window.</li> <li>ResearchUri: Path of the <code>.research</code> asset.</li> <li>Explosive: Determine if the transported cargo can explode. By default the value is <code>false</code>.</li> <li>ExplosionForce: Explosion force. By default the value is <code>null</code>. A very high value can cause a crater so large that it removes entire cities and industries from the map.</li> </ul>"},{"location":"guides/content-mods/creating-your-first-truck-mod/#truck-loads-capacities-asset","title":"Truck loads (<code>.capacities</code> asset)","text":"<p>This type of asset creates a load for items that are not visible, such as closed vans or trucks. For this reason, the <code>Items</code> array only shows the reference to the <code>.item</code> asset of each type of cargo.</p> <pre><code>{\n  \"Items\": {\n    \"base/advanced_furniture.item\": null,\n    \"base/advanced_wood_frame.item\": null,\n    ...\n    \"base/vacuum_tube.item\": null,\n    \"base/wood_frame.item\": null\n  },\n  \"TargetUri\": \"scm_truck_pack/box_trailer.carunit\",\n  \"MaxWeight\": 20.0,\n  \"LoadingSpeedMultiplier\": 1.0,\n  \"UnloadingSpeedMultiplier\": 1.0\n}\n</code></pre> <ul> <li>Items (Array): List of pathes of the <code>.item</code> asset that the vehicle accepts.</li> <li>TargetURI: Path of the <code>.carunit</code> asset affected by the load.</li> <li>MaxWeight: Maximum capacity that the vehicle can load. The number of units depends on the weight of the loaded items.</li> <li>LoadingSpeedMultiplier: Vehicle load speed multiplier. By default, the value is <code>1.0</code>.</li> <li>UnloadingSpeedMultiplier: Vehicle unload speed multiplier. By default, the value is <code>1.0</code>.</li> </ul>"},{"location":"guides/content-mods/creating-your-first-truck-mod/#truck-loads-stackcapacity-asset","title":"Truck loads (<code>.stackcapacity</code> asset)","text":"<p>This type of asset allows vehicles to have a stackable type load such as logs or planks.</p> <p>Compared to the capacities load type, this asset has more parameters regarding the size and position of the load.</p> <pre><code>{\n  \"Position\": [0, 0.431, 0.228],\n  \"Rotation\": [0, 0, 0],\n  \"SizeX\": 0.685,\n  \"SizeZ\": 1.3,\n  \"Items\": {\n    \"base/wood_log.item\": {\n      \"MeshUri\": \"base/wood_log.obj\",\n      \"Resolution\": {\n        \"X\": 3,\n        \"Y\": 2,\n        \"Z\": 1\n      },\n      \"Spacing\": [0.02, 0.02, 0.03],\n      \"Capacity\": null,\n      \"Explosive\": false,\n      \"ExplosionForce\": null\n    },\n    ...\n  },\n  \"TargetUri\": \"scm_truck_pack/hopper_trailer.carunit\",\n  \"MaxWeight\": 22.0,\n  \"LoadingSpeedMultiplier\": 1.0,\n  \"UnloadingSpeedMultiplier\": 1.0\n}\n</code></pre> <ul> <li>Position: Position of the loading platform. The image shows the coordinate axis that represents the configured values. </li> <li>Rotation: Rotation of the load. The value will always be 0 on each axis. SizeX / SizeZ: Size of the loading platform that will determine the size of the items depending on the number of items that we want to stack. </li> <li>Items (Array): This array specifies each item that the vehicle can load.</li> <li>MeshUri: Path of the .obj file of the load item.</li> <li>Resolution: The resolution is a three-dimensional grid that indicates the number of items to be stacked along the indicated axis. </li> <li>Spacing: Separation between each item in the three axes (front/back - left-right - top-down).</li> <li>Capacity: Item carrying capacity. If the value is null, the maximum load of items will be calculated with the maximum load of the vehicle.</li> <li>Explosive: Determine if the transported cargo can explode. By default the value is false.</li> <li>ExplosionForce: Explosion force. By default the value is null. A very high value can cause a crater so large that it removes entire cities and industries from the map.</li> </ul>"},{"location":"guides/content-mods/creating-your-first-truck-mod/#truck-loads-heapcapacity-asset","title":"Truck loads (<code>.heapcapacity</code> asset)","text":"<p>Heap-type loads are used for hopper-type vehicles to transport ores. This asset also adds animation parameters for loading and unloading the ore.</p> <p>In the following image, you can see the mesh of the coal heap. You can create a custom heap or use the model that comes with the base game but always set the parameters correctly.</p> <p></p> <pre><code>{\n  \"Keyframes\": {\n    \"0\": {\n      \"Position\": [0, 0.466, 0.416],\n      \"Rotation\": [0, 0, 0],\n      \"SizeX\": 0.0,\n      \"SizeZ\": 0.0,\n      \"ScaleY\": 0.0\n    },\n    \"0.2\": {\n      \"Position\": [0, 0.466, 0.416],\n      \"Rotation\": [0, 0, 0],\n      \"SizeX\": 0.8,\n      \"SizeZ\": 2.657,\n      \"ScaleY\": 0.5\n    },\n    \"1\": {\n      \"Position\": [0, 0.541, 0.416],\n      \"Rotation\": [0, 0, 0],\n      \"SizeX\": 0.8,\n      \"SizeZ\": 2.657,\n      \"ScaleY\": 1.0\n    }\n  },\n  \"Items\": {\n    \"base/coal.item\": {\n      \"MeshUri\": \"scm_truck_pack/coal_heap.obj\",\n      \"Capacity\": null,\n      \"Explosive\": false,\n      \"ExplosionForce\": null\n    }\n...\n  },\n  \"TargetUri\": \"scm_truck_pack/hopper_semitrailer.carunit\",\n  \"MaxWeight\": 32.0,\n  \"LoadingSpeedMultiplier\": 1.0,\n  \"UnloadingSpeedMultiplier\": 1.0\n}\n</code></pre> <ul> <li>Keyframes (Array): This array contains animation keyframes, <code>0.0</code> for when the vehicle is unloaded, some values for when it's partially loaded, and <code>1.0</code> one for when it is fully loaded. The value always goes from <code>0.0</code> to <code>1.0</code> regardless of the number of keyframes the load/unload animation has.</li> </ul> <p>The following parameters are self-explanatory, specifying the position, rotation, and mesh size of the load object.</p> <p>The rest of the parameters are the same as the rest of the assets explained above.</p>"},{"location":"guides/content-mods/creating-your-first-truck-mod/#truck-recipes-carrecipe-asset","title":"Truck recipes (<code>.carrecipe</code> asset):","text":"<p>Like locomotives, trucks can form compositions like the case of trailers, which have a dolly trailer and trailer.</p> <p>Its setting are exactly the same as the train recipe because it's the same asset. For more information read the section Train recipe settings (<code>.trainrecipe</code> asset) in the Creating your first locomotive mod guide.</p> <pre><code>{\n  \"Sections\": [\n    {\n      \"Count\": null,\n      \"MinCount\": null,\n      \"MaxCount\": 1,\n      \"Units\": [\n        {\n          \"Uri\": \"scm_truck_pack/dolly_trailer.carunit\",\n          \"Flipped\": false\n        },\n        {\n          \"Uri\": \"scm_truck_pack/box_trailer.carunit\",\n          \"Flipped\": false\n        }\n      ]\n    }\n  ],\n  \"ResearchUri\": \"scm_truck_pack/scm_trucks.research\",\n  \"Hidden\": false\n}\n</code></pre>"},{"location":"guides/content-mods/creating-your-first-truck-mod/#couplings-carcoupling-asset","title":"Couplings (<code>.carcoupling</code> asset )","text":"<p>Most of the trucks don't have couplings, but if it's a trailer or a semi-trailer it will have couplings at the front (<code>Coupling1Uri</code>), or if a cab at the rear (<code>Coupling2Uri</code>), or in both locations for dolly trailers.</p> <p></p>"},{"location":"guides/content-mods/creating-your-first-truck-mod/#further-reading","title":"Further reading","text":"<ul> <li>How to publish your mod</li> </ul>"},{"location":"guides/content-mods/using-audio-files/","title":"Using audio files","text":"<p>There's are two audio formats supported by content mods: <code>.wav</code> and <code>.ogg</code>.</p> <p>Usually, you should prefer using <code>.wav</code> files. They are uncompressed and do not require extra processing to be played.</p> <p>Using <code>.ogg</code> files makes sense only for very long tracks like soundtrack or long-running biome ambient sounds, where its uncompressed size can become an issue.</p>"},{"location":"guides/migration-guides/item-groups/","title":"Item groups","text":"<p>Item groups associate items (e.g. coal, sand, TVs, etc.) with storage (vehicles, warehouses) without having to list all supported items in each storage. This makes mod compatibility easier and eliminates the need for compatibility patches.</p> <p>Additionally, it standardizes the representation of similar items in the game, making it more predictable for players.</p> <p>If your mod adds new items or storage assets (vehicles or warehouses), it's recommended to update them to utilize item groups.</p>"},{"location":"guides/migration-guides/item-groups/#update-item-assets","title":"Update item assets","text":"<ol> <li>Set your item as belonging to one of available item groups using the new <code>ItemGroupUri</code> property.</li> <li>Set meshes used to display an item in different kind of storages using <code>MeshUris</code> property (keys are mesh tags).</li> </ol> <pre><code>{\n    \"ItemGroupUri\": \"base/bulk.itemgroup\",\n    \"MeshUris\": {\n        \"vehicle_heap\": \"base/gravel_item_heap.obj\"\n    },\n    // ...\n}\n</code></pre>"},{"location":"guides/migration-guides/item-groups/#update-storage-assets","title":"Update storage assets","text":"<p>Note</p> <p>Different capacity, resolution, or spacing settings per item aren't supported by this approach. If it's essential for your mod, you should stick to using <code>Items</code> property.</p> <p>By the way, you can mix both approaches.</p>"},{"location":"guides/migration-guides/item-groups/#storages","title":"<code>.storages</code>","text":"<ol> <li>List desired item groups in the <code>ItemGroupUris</code> array.</li> <li>Set <code>Items</code> property to <code>null</code>.</li> </ol> <pre><code>{\n-   \"Items\": {\n-        \"base/sand.item\": null,\n-        \"base/gravel.item\": null,\n-   },\n+   \"Items\": null,\n+   \"ItemGroupUris\": [\n+       \"base/bulk.itemgroup\"\n+   ],\n    // ...\n}\n</code></pre>"},{"location":"guides/migration-guides/item-groups/#passengerstorages","title":"<code>.passengerstorages</code>","text":"<ol> <li>List desired item groups in the <code>ItemGroupUris</code> array.</li> <li>Move <code>Capacity</code> settings to the root.</li> <li>Set <code>Items</code> property to <code>null</code>.</li> </ol> <pre><code>{\n-   \"Items\": {\n-        \"base/passenger.item\": {\n-           \"Capacity\": 30,\n-            // ...\n-       }\n-   },\n+   \"Items\": null,\n+   \"Capacity\": 30,\n+   \"ItemGroupUris\": [\n+       \"base/passenger.itemgroup\"\n+   ],\n    // ...\n}\n</code></pre>"},{"location":"guides/migration-guides/item-groups/#stackstorages","title":"<code>.stackstorages</code>","text":"<ol> <li>List desired item groups in the <code>ItemGroupUris</code> array.</li> <li>Move essentinal <code>Capacity</code>, <code>Resolution</code>, and <code>Spacing</code> settings to the root (if set to <code>null</code>, they will be calculated automatically).</li> <li>Set <code>MeshTag</code> property to <code>default</code>.</li> <li>Set <code>Items</code> property to <code>null</code>.</li> </ol>"},{"location":"guides/migration-guides/item-groups/#heapstorages","title":"<code>.heapstorages</code>","text":"<ol> <li>List desired item groups in the <code>ItemGroupUris</code> array.</li> <li>Move essentinal <code>Capacity</code>, <code>Resolution</code>, and <code>Spacing</code> settings to the root (if set to <code>null</code>, they will be calculated automatically).</li> <li>Set <code>MeshTag</code> property to <code>vehicle_heap</code>.</li> <li>Set <code>Items</code> property to <code>null</code>.</li> </ol>"},{"location":"guides/migration-guides/item-groups/#built-in-groups","title":"Built-in groups","text":"URI Items base/bulk.itemgroup base/general.itemgroup base/long_general.itemgroup base/mail.itemgroup base/open_bulk.itemgroup base/open_general.itemgroup base/passenger.itemgroup <p>The next item groups are not used in the base game yet, but already can be utilized by mods.</p> URI base/dangerous_liquid.itemgroup base/expensive.itemgroup base/liquid.itemgroup base/perishable.itemgroup <p>Feedback wanted</p> <p>You can share your suggestions for additional item categories to be included in the base game via Discord.</p>"},{"location":"guides/migration-guides/item-groups/#mesh-tags","title":"Mesh tags","text":"<p>Mesh tags are used to define what mesh should be used to display an item inside an open storage.</p> <p>Base game provides the next mesh tags:</p> Mesh tag Storage Description default <code>.stackstorages</code> Used to display items in stacks vehicle_heap <code>.heapstorages</code> Used to display items as heap inside vehicles"},{"location":"guides/script-mods/adding-onclick-event-to-a-notification/","title":"Adding an OnClick-event to a Notification","text":"<p>This guide is authored by Voxel Tycoon community member Nebruzias</p>"},{"location":"guides/script-mods/adding-onclick-event-to-a-notification/#introduction","title":"Introduction","text":"<p>This tutorial will guide you through the process of triggering an action whenever you click on a Notification.</p> <p>After finishing this tutorial, you will know how to:</p> <ul> <li>Create a class with the INotificationAction Interface</li> <li>Add an action to your Notifications</li> </ul> <p>Note</p> <p>This guide continues on Creating your first script mod. If you dont know how to setup the environment or how to get a mod in game, please follow this guide first.</p> <p>This guide is based on Visual Studio 2019 Community Edition</p>"},{"location":"guides/script-mods/adding-onclick-event-to-a-notification/#main-class","title":"Main Class","text":"<p>Start a new project and call it \"NotificationActionExample\".</p> <p>An unwritten rule in programming is that you give your variables, classes, methods, etc, clear names. They should be named in such a way so that you know what their function is when you read their name.</p> <p>As you might have noticed, when we created this project, the class inside the project is named \"Class1\" by default.</p> <pre><code>namespace NotificationActionExample\n{\n    public class Class1\n    {\n    }\n}\n</code></pre> <p>Obviously this is not a very clear name. Lets start with renaming Class1 and give it the name \"Main\". The reason for this name is that usually the first class in your project will be your main class which manages and executes everything else. Of course you are free to call it whatever, it is not required to be named \"Main\" for the mod to work, just make sure the name represents the function of this class.</p> <p>To rename the class, right click on Class1 in your Solution Explorer and select Rename.</p> <p></p> <p>Then type in \"Main\" and press enter.</p> <p>Note</p> <p>After you have pressed enter, you are asked if you want to perform a rename for all references, select Yes.</p> <p>Now we need to get access to callbacks which allows us to execute code at a certain point in the games lifecycle. To get access to these callbacks we need to inherit from the <code>Mod</code>-class.</p> <p>Where it says <code>public class Main</code>, change this to <code>public class Main : Mod</code>.</p> <p>The <code>Mod</code>-class gives us access to a couple of callbacks. For this example we are interested in the <code>OnGameStarted()</code>-callback.</p> <p>Inside your <code>Main</code>-class, add:</p> <pre><code>protected override void OnGameStarted()\n{\n\n}\n</code></pre> <p>Now we can set up our notification inside <code>OnGameStarted()</code>, just like in the \"Creating your first script mod\" guide.</p> <p>Lets add the following code to <code>OnGameStarted()</code>:</p> <pre><code>//Priority is an optional argument when calling the NotificationManager\nNotificationPriority priority = NotificationPriority.Default;\n\n//Color is an optional argument when calling the NotificationManager\n//Beware, using Color can cause a small issue, read note below\nColor color = Company.Current.Color;\nstring title = \"Notification Action\";\nstring message = \"Click this notification to trigger a Notification Action\";\n\n//Lets use a bell as an icon\nFontIcon icon = FontIcon.FaSolid(\"\\uf0f3\");\n</code></pre> <p>Note</p> <p>Instead of using <code>Color</code>, <code>string</code>, etc, you can also use the <code>var</code> type. Personally Im not a fan of <code>var</code>, but you are free to use it if you prefer using <code>var</code> instead.</p> <p>Unfortunately using <code>Color</code> instead of <code>var</code> can cause a small issue in this example. When we added the variable type <code>Color</code>, the namespace <code>System.Drawing</code> was  automatically added, since <code>Color</code> is part of this namespace. While <code>Company.Current.Color</code> does return a value of type <code>Color</code>, it is not part of the <code>System.Drawing</code> namespace, instead it belongs to the <code>UnityEngine</code> namespace. It is throwing an error because the value <code>Company.Current.Color</code> returns does not fit in <code>System.Drawing.Color</code>.</p> <p>There are 2 ways to fix this problem:</p> <ul> <li>Replace <code>using System.Drawing;</code> with <code>using UnityEngine;</code></li> <li>If you can't replace/remove the <code>System.Drawing</code> namespace (because you might need it for something else), declare the color-variable like: <code>UnityEngine.Color color = Company.Current.Color;</code></li> </ul> <p><code>NotificationManager.Current.Push()</code> requires 6 arguments:</p> <ol> <li>Priority (Optional)</li> <li>Color (Optional)</li> <li>Title</li> <li>Message</li> <li>Action</li> <li>Icon</li> </ol> <p>We have set variables for all the arguments, except Action. Before we can create and set a variable for this argument, we have to create a new <code>Class</code>.</p>"},{"location":"guides/script-mods/adding-onclick-event-to-a-notification/#notificationaction-class","title":"NotificationAction Class","text":"<p>Lets create a new <code>Class</code>.</p> <p>Right click on your project in your Solution Explorer, then go to Add &gt; New Item...</p> <p></p> <p>Then in the next window select Class and give it the name NotificationAction.cs and click Add.</p> <p></p> <p>Once you have added this new class, follow the steps below:</p> <ol> <li>Implement the <code>INotificationAction</code>-interface.</li> </ol> <p>After you implemented the interface, your <code>NotificationAction</code>-class should now look like this:  <pre><code>class NotificationAction : INotificationAction\n{\n    public void Act()\n    {\n        throw new NotImplementedException();\n    }\n\n    public void Read(StateBinaryReader reader)\n    {\n        throw new NotImplementedException();\n    }\n\n    public void Write(StateBinaryWriter writer)\n    {\n        throw new NotImplementedException();\n    }\n}\n</code></pre></p> <p>Help</p> <p>How to implement an interface?</p> <ol> <li>(Optional) Remove the <code>throw new NotImplementedException();</code> from all 3 callbacks, to prevent any exceptions showing up in game.</li> <li> <p>Lets add some code to the <code>Act()</code>-callback. This is the callback that will be triggered when you click on the linked notification.     As an action we are going to show another notification that tells us that we succesfully triggered a notification action.</p> <p>Lets set up a new notification:</p> <pre><code>//Priority is an optional parameter\nNotificationPriority priority = NotificationPriority.Default;\n\n//For a color, lets use a somewhat darker green - Make sure you're using the Color32 type, read below\nColor32 color = new Color32(63, 191, 63, 255);\n\nstring title = \"SUCCES!!!\";\nstring message = \"You have succesfully triggered a notification action!\";\n\n//Lets use a thumbs up as an icon\nFontIcon icon = FontIcon.FaSolid(\"\\uf164\");\n</code></pre> </li> </ol> <p>Note</p> <p>The <code>Color32</code>-type accepts the full RGBA values (0 - 255), while the <code>Color</code>-type only accepts values from 0 to 1. When you have a RGB value you want to use, it is recommended to use the <code>Color32</code>-type, else you have to convert your RGB values to a value between 0 and 1. This is not difficult to do, but it requires a bit of extra work which can be avoided.</p> <p>Then we need to call the Notification Manager to actually display this notification. We do this with adding the following statement:</p> <p><code>NotificationManager.Current.Push(priority, color, title, message, null, icon);</code></p> <p>Note</p> <p><code>INotificationAction action</code> is a required argument while calling <code>NotificationManager</code>. Since we dont have an action we want to happen when this notification is clicked, we just pass <code>null</code> for this argument.</p> <p>As a final result your <code>NotificationAction</code>-class should now look like this:</p> <pre><code>class NotificationAction : INotificationAction\n{\n    public void Act()\n    {\n        //Priority is an optional parameter\n        NotificationPriority priority = NotificationPriority.Default;\n\n        //Color is an optional parameter\n        Color32 color = new Color32(63, 191, 63, 255);\n\n        string title = \"SUCCES!!!\";\n        string message = \"You have succesfully triggered a notification action!\";\n\n        //Lets use a thumbs up as an icon\n        FontIcon icon = FontIcon.FaSolid(\"\\uf164\");\n\n        NotificationManager.Current.Push(priority, color, title, message, null, icon);\n    }\n\n    public void Read(StateBinaryReader reader)\n    {\n\n    }\n\n    public void Write(StateBinaryWriter writer)\n    {\n\n    }\n}\n</code></pre> <p>Now that we have a class which can go in the <code>INotificationAction action</code>-variable, we can implement it.</p>"},{"location":"guides/script-mods/adding-onclick-event-to-a-notification/#implement-the-notification-action","title":"Implement the Notification Action","text":"<p>Add the following line to your <code>OnGameStarted()</code>-callback in your <code>Main</code>-Class: </p> <p><code>INotificationAction action = new NotificationAction();</code></p> <p>Your <code>Main</code>-class should now look like this:</p> <pre><code>public class Main : Mod\n{\n    public void OnGameStarted()\n    {\n        //Priority is an optional parameter\n        NotificationPriority priority = NotificationPriority.Default;\n        //Color is an optional parameter\n        Color color = Company.Current.Color;\n\n        string title = \"Notification Action\";\n        string message = \"Click this notification to trigger a Notification Action\";\n\n        //Lets use a bell as an icon\n        FontIcon icon = FontIcon.FaSolid(\"\\uf0f3\");\n\n        INotificationAction action = new NotificationAction();\n    }\n}\n</code></pre> <p>Now we have all the required arguments to call the Notification Manager.</p> <p>Add the following statement to your <code>OnGameStarted</code>-callback in your <code>Main</code>-Class:</p> <p><code>NotificationManager.Current.Push(priority, color, title, message, action, icon);</code></p> <p>As a final result your <code>Main</code>-class should look like this:</p> <pre><code>public class Main : Mod\n{\n    public void OnGameStarted()\n    {\n        //Priority is an optional parameter\n        NotificationPriority priority = NotificationPriority.Default;\n        //Color is an optional parameter\n        Color color = Company.Current.Color;\n\n        string title = \"Notification Action\";\n        string message = \"Click this notification to trigger a Notification Action\";\n\n        //Lets use a bell as an icon\n        FontIcon icon = FontIcon.FaSolid(\"\\uf0f3\");\n\n        INotificationAction action = new NotificationAction();\n\n        NotificationManager.Current.Push(priority, color, title, message, action, icon);\n    }\n}\n</code></pre>"},{"location":"guides/script-mods/adding-onclick-event-to-a-notification/#compile-and-run-the-mod","title":"Compile and run the mod","text":"<p>Now we can add this mod to the game and try it out.</p> <p>Tip</p> <p>To read in detail how to do this, check Run the mod section of the Creating your first script mod guide.</p> <p>Follow the steps below:</p> <ol> <li>Build your project into a .dll-file</li> <li>Locate your .dll-file and place it in <code>Content/&lt;your_mod_folder&gt;</code></li> <li>Create a mod.json file</li> <li>Start Voxel Tycoon and start a new game with your just created mod activated</li> <li>Wait for your game to load...</li> <li>CLICK THAT NOTIFICATION!!!</li> </ol>"},{"location":"guides/script-mods/adding-onclick-event-to-a-notification/#play-around","title":"Play around","text":"<p>If you're not yet very familiar with coding, I suggest to play around some more to see what other awesome things you can do with Notification Actions. This is a good way to get better with coding.</p>"},{"location":"guides/script-mods/creating-your-first-script-mod/","title":"Creating your first script mod","text":""},{"location":"guides/script-mods/creating-your-first-script-mod/#introduction","title":"Introduction","text":"<p>This tutorial will guide you through the process of creating your first script mod for Voxel Tycoon.</p> <p>To get a common understanding of how script mods work and what is possible to be done with them, please refer .dll asset documentation page.</p> <p>We assume that you have at least basic knowledge of development in C# and Unity.</p> <p>After finishing this tutorial, you will know how to:</p> <ul> <li>Setup development environment</li> <li>Build super simple but working script mod that shows custom in-game notifications</li> </ul> <p>Tldr</p> <p>Resulting source code, with some additions, can be found here: https://github.com/voxeltycoon/mods.</p>"},{"location":"guides/script-mods/creating-your-first-script-mod/#set-up-the-environment","title":"Set up the environment","text":"<p>Script mods can be built with any tools that could compile your source code into the .NET DLL. This ranges from full-featured IDEs like Visual Studio, to manually calling the compiler on source files.</p> <p>In this tutorial, we will use Visual Studio (Community 2019) for this purpose, as the most straightforward way to build a .NET DLL on Windows. It can be obtained for free from the official site.</p> <p>Ensure that you have .NET Desktop development workload installed:</p> <p></p> <p>Besides Visual Studio, you'll need - obviously - a licensed copy of Voxel Tycoon to test and publish your mods.</p> <p>Actually, this concludes all the preparations you need to start developing your first script mod. As you may notice, even Unity installation is not required.</p>"},{"location":"guides/script-mods/creating-your-first-script-mod/#create-a-new-project","title":"Create a new project","text":"<p>After you launch Visual Studio, you'll see the welcome window. Hit Create new project there:</p> <p></p> <p>Then choose Class Library (.NET Standard) (make sure you choose C# one, not Visual Basic):</p> <p></p> <p>Name your project and choose where it should be placed (this is where your source code will be located, not the result DLL file,  so DO NOT choose game's <code>Content</code> folder):</p> <p></p> <p>Now, we need to add references to libraries that contain APIs we want to access. To do this, right-click on the project dependencies item in the Solution Explorer (1), then click on Add Reference... (2):</p> <p></p> <p>Reference Manager window will appear. Hit Browse on the left (1) then Browse at the bottom (2) and select <code>VoxelTycoon.dll</code> and <code>UnityEngine.CoreModule.dll</code> libraries that can be found in <code>VoxelTycoon_Data/Managed</code> directory inside the game folder (3):</p> <p></p> <p>The project for our mod is ready! Now it's time to make it do something.</p>"},{"location":"guides/script-mods/creating-your-first-script-mod/#write-some-code","title":"Write some code","text":"<p>As a simple but working example let's make our mod to show a custom in-game notification when the game is loaded.</p>"},{"location":"guides/script-mods/creating-your-first-script-mod/#inherit-from-the-mod-abstract-class","title":"Inherit from the <code>Mod</code> abstract class","text":"<p>To let the game know what code it should run from our script mod, we need to inherit from the <code>Mod</code> class, situated at the <code>VoxelTycoon.Modding</code> namespace.</p> <p><code>Mod</code> class exposes several callbacks, but for our mod it's enough to override just <code>OnGameStarted</code> one:</p> <pre><code>    public class Class1 : Mod\n    {\n        protected override void OnGameStarted()\n        {\n            // That's where our mod logic goes.\n        }\n    }\n</code></pre>"},{"location":"guides/script-mods/creating-your-first-script-mod/#access-notification-manager-api","title":"Access Notification Manager API","text":"<p>To show our notification in-game, we need to access Notification Manager. Besides other methods it exposes, the most we interested in currently is this one:</p> <pre><code>public Notification Push(NotificationPriority priority,\n    Color color,\n    string title,\n    string message,\n    INotificationAction action,\n    FontIcon icon)\n</code></pre> <p>Let's call it from our mod's code:</p> <pre><code>protected override void OnGameStarted()\n{\n    // Maximum priority so we never miss it.\n    var priority = NotificationPriority.Critical;\n\n    // Make the notification look fancy by setting the color\n    // to the current company color.\n    var color = Company.Current.Color;\n\n    var title = \"Hello World!\";\n    var message = \"Oh gosh, this is my first ever C# mod \" +\n    \"for VT, and it's actually working for some reason!\";\n\n    // Action is executed when player clicks on notification.\n    // For the sake of simplicity, we will not cover notification\n    // actions in this tutorial, so we just pass default value (null),\n    // which effectively means no action will be executed on click.\n    var action = default(INotificationAction);\n\n    // Use custom FontAwesome (https://fontawesome.com/icons) icon\n    var icon = FontIcon.FaSolid(\"\\uf7e4\");\n\n    // And finally, call the API\n    NotificationManager.Current.Push(priority,\n        color,\n        title,\n        message,\n        action,\n        icon);\n}\n</code></pre> <p>Info</p> <p>There's a lot of managers present around the code of Voxel Tycoon. Most of the game API is accessable through them.</p> <p>Tip</p> <p>You can create your own managers by inheriting from <code>Manager&lt;T&gt;</code> or <code>LazyManager&lt;T&gt;</code> classes.</p>"},{"location":"guides/script-mods/creating-your-first-script-mod/#run-the-mod","title":"Run the mod","text":"<p>That's it! Our brilliant mod is almost ready to be put in the game.</p>"},{"location":"guides/script-mods/creating-your-first-script-mod/#compile-the-mod-into-a-dll","title":"Compile the mod into a DLL","text":"<p>Now we need to compile our source code to a DLL file that can be put into the game. To do this, select Build \u2794 Build Solution in the Visual Studio top menu.</p> <p>After the build process successfully finishes, you will find the result DLL at the <code>&lt;project location&gt;/bin/Debug/netstandard2.1/&lt;project name&gt;.dll</code> directory.</p> <p>Note</p> <p>Depending on chosen build configuration, the DLL may be built to <code>Release</code> directory instead of <code>Debug</code>. </p>"},{"location":"guides/script-mods/creating-your-first-script-mod/#run-the-game","title":"Run the game","text":"<p>As we now have a DLL, we can put it into the game. Just copy the DLL to your mod directory inside the game's <code>Content</code> folder, just as you do with any other mod asset. Now you can run VT, and start the new game with your mod enabled.</p> <p>Note</p> <p>Don't forget to put a <code>mod.json</code> metadata file inside the mod pack folder which will allow the game to locate and load the mod.</p> <p>Tip</p> <p>To avoid manual copying the DLL file after every change, you can setup post-build event in the project settings.</p>"},{"location":"guides/script-mods/creating-your-first-script-mod/#enjoy-yourself","title":"Enjoy yourself","text":"<p>Congratulations! You've just created such an amazing mod, just as you are! \u2728</p> <p>As a conclusion, take a look at some points that were left outside of the scope of this tutorial:</p> <ul> <li>One DLL can contain not just one code file, but any amount you need</li> <li>Explore other callbacks <code>Mod</code> class provides, like <code>OnUpdate()</code> or <code>Initialize()</code> (called before any assets loaded)</li> <li>Mods can read and write data to a save file using corresponding callbacks</li> <li>You can debug your code by writing logs or even attaching a debugger</li> <li>As stated at Where's API documentation?, feel free to explore the game code base for existent and possible APIs, and let us know what you think!</li> </ul> <p>Happy coding! \ud83d\udc9c</p>"},{"location":"guides/script-mods/debugging/attaching-a-debugger/","title":"Attaching a debugger","text":"<p>This guide is an adaptation of this post by CuteLasty</p>"},{"location":"guides/script-mods/debugging/attaching-a-debugger/#prerequirements","title":"Prerequirements","text":"<ul> <li> <p>This guide assumes you know how to use Visual Studio debugger. If not, first get familiar with it in this this step-by-step walkthrough.</p> </li> <li> <p>You Visual Studio installation should have Visual Studio Tools for Unity installed.</p> </li> </ul>"},{"location":"guides/script-mods/debugging/attaching-a-debugger/#extract-development-files-from-unity-installation","title":"Extract development files from Unity installation","text":"<ol> <li>First, you need to determine what version of Unity used to build the game. To do so, see properties of <code>UnityPlayer.dll</code> file from the game folder. Under Details tab, there's Product version property. For example, if this property contains something like <code>2020.2.2.1234</code> we need 2020.2.2 version of Unity.</li> <li>Download and install correct version (2020.2.2 in our case) of Unity. Don't choose any additional components other than Unity itself. It can be uninstalled after finishing this guide, so don't care much where you install it, but remember the folder.</li> <li> <p>After installation complete, navigate to the folder where you just installed Unity, then to the <code>Editor\\Data\\PlaybackEngines\\windowsstandalonesupport\\Variations\\win64_development_mono\\</code> subfolder, and do the following:</p> File Action <code>UnityPlayer.dll</code> Replace the one in the game folder <code>WinPixEventRuntime.dll</code> Replace the one in the game folder <code>WindowsPlayer.exe</code> Replace <code>VoxelTycoon.exe</code> in the game folder </li> </ol> <p>Important</p> <p>If the Unity version used to build the game will change, you'll need to repeat this guide using correct version.</p>"},{"location":"guides/script-mods/debugging/attaching-a-debugger/#put-the-game-itself-into-development-mode","title":"Put the game itself into development mode","text":"<p>Open <code>VoxelTycoon_Data\\boot.config</code> and add these strings:</p> <pre><code>wait-for-managed-debugger=1\nplayer-connection-debug=1\n</code></pre>"},{"location":"guides/script-mods/debugging/attaching-a-debugger/#attach-a-debugger","title":"Attach a debugger","text":"<ol> <li>Rebuild your mod, and place <code>.dll</code> and <code>.pdb</code> files to your mod folder inside the game's <code>Content\\</code> folder.</li> <li>Now run the game and you should see a dialog saying You can attach a managed debugger now if you want.</li> <li>In Visual Studio, go to Debug \u2794 Attach Unity Debugger, then double-click an item in the dialog shown.</li> </ol> <p>That's it! Now you able to set break points on your mod code, and inspect variable values.</p> <p>Important</p> <p>The game running in the development mode will have reduced performance, so after you end with debugging your mod, you'll want to restore game files to the original state. To do so, just verify integrity of game files.</p> <p>In this case (or with each game update) all the changes you made following this guide we'll be lost. To avoid this you can copy <code>UnityPlayer.dll</code>, <code>WinPixEventRuntime.dll</code>, <code>VoxelTycoon.exe</code>, and <code>VoxelTycoon_Data\\boot.config</code> files into some backup folder, so you can copy it back later without need to install Unity again.</p>"},{"location":"guides/script-mods/debugging/attaching-a-debugger/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Ensure that Project properties \u2794 Build \u2794 Advanced\u2026 \u2794 Debugging information is set to <code>Portable</code>.</li> <li>Ensure you have Visual Studio Tools for Unity installed.</li> </ul>"},{"location":"guides/script-mods/debugging/writing-logs/","title":"Writing logs","text":"<p>You can use Unity's Debug.Log() that will output to Player.log.</p> <p>There's also a <code>Logger</code> class provided by Voxel Tycoon API to get nicer output:</p> <pre><code>public class MyMod : Mod\n{\n    _logger = new Logger&lt;MyMod&gt;();\n\n    public void Initialize()\n    {\n        _logger.Log(\"Initialized!\");\n    }\n}\n</code></pre> <p>Output: <pre><code>[1/31/2021 11:42:45 PM] [MyMod] Initialized!\n</code></pre></p>"},{"location":"guides/script-mods/debugging/writing-logs/#playerlog","title":"Player.log","text":"<p><code>Player.log</code> is where the game writes all its logs. You can write there too using Unity's Debug.Log() in your script mods.</p> <p>This file can be found in the next locations:</p> Platform Windows %appdata%/../LocalLow/VoxelTycoon/VoxelTycoon/Player.log macOS ~/Library/Logs/VoxelTycoon/VoxelTycoon/Player.log Linux ~/.config/unity3d/VoxelTycoon/VoxelTycoon/Player.log"},{"location":"reference/","title":"Introduction","text":""},{"location":"reference/#where-to-begin","title":"Where to begin?","text":"<p>If this is your first time making a script mod, you should refer to the script mod overview page.</p>"},{"location":"reference/#commonly-used-entities","title":"Commonly Used Entities","text":"<ul> <li>Modding.Mod</li> <li>Company</li> </ul>"},{"location":"reference/#contribute","title":"Contribute!","text":"<p>Creating API documentation from scratch is very time consuming. To help with its creation you don't need to be a programming genius, just look at the decompiled sources and write the documentation in the same way it's created (splitting into properties, methods, constructors, etc.) and use the templates. Just go to the docs repository (top right) and start writing!</p>"},{"location":"reference/VoxelTycoon/Biome/","title":"Class Biome","text":"<p>Represents a biome</p> <p>Namespace: <code>VoxelTycoon</code></p>"},{"location":"reference/VoxelTycoon/Biome/#constructor","title":"Constructor","text":""},{"location":"reference/VoxelTycoon/Biome/#biome","title":"Biome()","text":"<p>Creates new biome with default values.</p> <p>Declaration</p> <pre><code>public Biome()\n</code></pre>"},{"location":"reference/VoxelTycoon/Biome/#properties","title":"Properties","text":""},{"location":"reference/VoxelTycoon/Biome/#ambient","title":"Ambient","text":"<p>Audioclip used as an ambient sound.</p> <p>Declaration</p> <pre><code>public AudioClip Ambient { get; set; }\n</code></pre> Type Description AudioClip Audio clip used for the biome"},{"location":"reference/VoxelTycoon/Biome/#assetid","title":"AssetId","text":"<p>The biome asset's ID.</p> <p>Declaration</p> <pre><code>public int AssetId { get; set; }\n</code></pre> Type Description int ID of the biome"},{"location":"reference/VoxelTycoon/Biome/#bodycolor","title":"BodyColor","text":"<p>Color of the biome.</p> <p>Declaration</p> <pre><code>public Color BodyColor { get; set; }\n</code></pre> Type Description Color Biome's color"},{"location":"reference/VoxelTycoon/Biome/#bumpiness","title":"Bumpiness","text":"<p>Biome's bumpiness.</p> <p>Declaration</p> <pre><code>public float Bumpiness { get; set; }\n</code></pre> Type Description float Value of the bumpiness"},{"location":"reference/VoxelTycoon/Biome/#covercolor","title":"CoverColor","text":"<p>Biome's cover color.</p> <p>Declaration</p> <pre><code>public Color CoverColor { get; set; }\n</code></pre> Type Description Color Biome's cover color"},{"location":"reference/VoxelTycoon/Biome/#displayname","title":"DisplayName","text":"<p>Biome's display name.</p> <p>Declaration</p> <pre><code>public DisplayString DisplayName { get; set; }\n</code></pre> Type Description DisplayString String (and optional format) representing the biome's name"},{"location":"reference/VoxelTycoon/Biome/#hidden","title":"Hidden","text":"<p>Indicates whether the biome is hidden or not.</p> <p>Declaration</p> <pre><code>public bool Hidden { get; set; }\n</code></pre> Type Description bool Whether the biome is hidden"},{"location":"reference/VoxelTycoon/Biome/#humidity","title":"Humidity","text":"<p>Represents the biome's humidity.</p> <p>Declaration</p> <pre><code>public float Humidity { get; set; }\n</code></pre> Type Description float Biome's humidity"},{"location":"reference/VoxelTycoon/Biome/#liverytag","title":"LiveryTag","text":"<p>Biome's livery tag.</p> <p>Declaration</p> <pre><code>public string LiveryTag { get; set; }\n</code></pre> Type Description string Biome's livery tag"},{"location":"reference/VoxelTycoon/Biome/#plants","title":"Plants","text":"<p>Biome's plants.</p> <p>Declaration</p> <pre><code>public ImmutableList&lt;PlantProbability&gt; Plants { get; }\n</code></pre> Type Description ImmutableList List of Plants"},{"location":"reference/VoxelTycoon/Biome/#sounds","title":"Sounds","text":"<p>Represents the biome's sounds.</p> <p>Declaration</p> <pre><code>public Audio.SoundProbabilityCollection Sounds { get; set; }\n</code></pre> Type Description Audio.SoundProbabilityCollection Biome's sounds"},{"location":"reference/VoxelTycoon/Biome/#tags","title":"Tags","text":"<p>Biome's tags.</p> <p>Declaration</p> <pre><code>public ImmutableUniqueList&lt;string&gt; Tags { get; }\n</code></pre> Type Description ImmutableUniqueList Biome's tags list"},{"location":"reference/VoxelTycoon/Biome/#temperature","title":"Temperature","text":"<p>Biome's temperature.</p> <p>Declaration</p> <pre><code>public float Temperature { get; set;}\n</code></pre> Type Description float Biome's temperature"},{"location":"reference/VoxelTycoon/Biome/#methods","title":"Methods","text":""},{"location":"reference/VoxelTycoon/Biome/#setplantsilist","title":"SetPlants(IList) <p>Sets the biome's plants.</p> <p>Declaration</p> <pre><code>public void SetPlants(IList&lt;PlantProbability&gt; plants)\n</code></pre> <p>Parameters</p>    Type Name Description     IList plants Biome's plants","text":""},{"location":"reference/VoxelTycoon/Biome/#settagsilist","title":"SetTags(IList) <p>Sets the biome's tags.</p> <p>Declaration</p> <pre><code>public void SetTags(IList&lt;string&gt; tags)\n</code></pre> <p>Parameters</p>    Type Name Description     IList tags Biome's tags","text":""},{"location":"reference/VoxelTycoon/Company/","title":"Class Company","text":"<p>Represents a Player Company</p> <p>Namespace: <code>VoxelTycoon</code></p>"},{"location":"reference/VoxelTycoon/Company/#constructors","title":"Constructors","text":""},{"location":"reference/VoxelTycoon/Company/#company","title":"Company()","text":"<p>Creates new company with default values.</p> <p>Declaration</p> <pre><code>public Company()\n</code></pre>"},{"location":"reference/VoxelTycoon/Company/#companystatebinaryreader","title":"Company(StateBinaryReader)","text":"<p>Creates new company from provided binary reader.</p> <p>Declaration</p> <pre><code>public Company(StateBinaryReader reader)\n</code></pre> Type Name Description StateBinaryReader reader Reader with company values"},{"location":"reference/VoxelTycoon/Company/#properties","title":"Properties","text":""},{"location":"reference/VoxelTycoon/Company/#cheater","title":"Cheater","text":"<p>Whether the player company has used cheats.</p> <p>Declaration</p> <pre><code>public bool Cheater { get; set; }\n</code></pre> Type Description bool True if cheats were used"},{"location":"reference/VoxelTycoon/Company/#color","title":"Color","text":"<p>The company's color. Changing it will invoke the <code>ColorChanged</code> action.</p> <p>Declaration</p> <pre><code>public Color Color { get; set; }\n</code></pre> Type Description Color Company color"},{"location":"reference/VoxelTycoon/Company/#contrastcolor","title":"ContrastColor","text":"<p>Get's color that's a contract to a company's color.</p> <p>Declaration</p> <pre><code>public Color ContrastColor { get; }\n</code></pre> Type Description Color Contrasting color"},{"location":"reference/VoxelTycoon/Company/#current","title":"Current","text":"<p>Get's current company used in the game.</p> <p>Declaration</p> <pre><code>public static Company Current { get; }\n</code></pre> Type Description Company Current company"},{"location":"reference/VoxelTycoon/Company/#currentbudgetperiod","title":"CurrentBudgetPeriod","text":"<p>Gets company's current budget period.</p> <p>Declaration</p> <pre><code>public BudgetPeriod CurrentBudgetPeriod { get; private set; }\n</code></pre> Type Description BudgetPeriod Company's budget period"},{"location":"reference/VoxelTycoon/Company/#headquarters","title":"Headquarters","text":"<p>Company's headquarters building.</p> <p>Declaration</p> <pre><code>public Headquarters Headquarters { get; internal set; }\n</code></pre> Type Description Headquarters Company's headquarters, probably <code>null</code> if not built"},{"location":"reference/VoxelTycoon/Company/#headquartersflag","title":"HeadquartersFlag","text":"<p>Probably indicates whether headquarters were built.</p> <p>Declaration</p> <pre><code>public bool HeadquartersFlag { get; set; }\n</code></pre> Type Description bool Whether headquarters are built (?)"},{"location":"reference/VoxelTycoon/Company/#id","title":"Id","text":"<p>Company Id.</p> <p>Declaration</p> <pre><code>public byte Id { get; set; }\n</code></pre> Type Description byte Company's internal Id"},{"location":"reference/VoxelTycoon/Company/#loan","title":"Loan","text":"<p>Company's current loan.</p> <p>Declaration</p> <pre><code>public double Loan { get; }\n</code></pre> Type Description double Loan"},{"location":"reference/VoxelTycoon/Company/#loancount","title":"LoanCount","text":"<p>Amount of loans currently taken.</p> <p>Declaration</p> <pre><code>public int LoanCount { get; private set; }\n</code></pre> Type Description int Amount of loans"},{"location":"reference/VoxelTycoon/Company/#loaninterest","title":"LoanInterest","text":"<p>Current loan interest.</p> <p>Declaration</p> <pre><code>public double LoanInterest { get; private set; }\n</code></pre> Type Description double Loan interest"},{"location":"reference/VoxelTycoon/Company/#loanstep","title":"LoanStep","text":"<p>How much loan increases each time it's taken.</p> <p>Declaration</p> <pre><code>public double LoanStep { get; private set; }\n</code></pre> Type Description double Amount of money received when taking a loan"},{"location":"reference/VoxelTycoon/Company/#maxloan","title":"MaxLoan","text":"<p>Maximum loan company can take.</p> <p>Declaration</p> <pre><code>public double MaxLoan { get; }\n</code></pre> Type Description double Max loan amount"},{"location":"reference/VoxelTycoon/Company/#maxloancount","title":"MaxLoanCount","text":"<p>Maximum amount of times company can take a loan.</p> <p>Declaration</p> <pre><code>public int MaxLoanCount { get; }\n</code></pre> Type Description int How much loans can company take"},{"location":"reference/VoxelTycoon/Company/#money","title":"Money","text":"<p>How much money a company has.</p> <p>Declaration</p> <pre><code>public double Money { get; private set; }\n</code></pre> Type Description double Amount of money"},{"location":"reference/VoxelTycoon/Company/#name","title":"Name","text":"<p>Company name. Changing it will invoke the <code>NameChanged</code> action.</p> <p>Declaration</p> <pre><code>public string Name { get; set; }\n</code></pre> Type Description string Company name"},{"location":"reference/VoxelTycoon/Company/#previousbudgetperiod","title":"PreviousBudgetPeriod","text":"<p>Company's previous budget period.</p> <p>Declaration</p> <pre><code>public BudgetPeriod PreviousBudgetPeriod { get; private set; }\n</code></pre> Type Description BudgetPeriod Previous budget period"},{"location":"reference/VoxelTycoon/Company/#value","title":"Value","text":"<p>Company's value.</p> <p>Declaration</p> <pre><code>public double Value { get; private set; }\n</code></pre> Type Description double Company value"},{"location":"reference/VoxelTycoon/Company/#events","title":"Events","text":""},{"location":"reference/VoxelTycoon/Company/#colorchanged","title":"ColorChanged","text":"<p>Action on when company color changes.</p> <p>Declaration</p> <pre><code>public event Action ColorChanged;\n</code></pre> Type Description Action ColorChanged event action"},{"location":"reference/VoxelTycoon/Company/#moneychanged","title":"MoneyChanged","text":"<p>Action on when company money changes.</p> <p>Declaration</p> <pre><code>public event Action MoneyChanged;\n</code></pre> Type Description Action MoneyChanged event action"},{"location":"reference/VoxelTycoon/Company/#namechanged","title":"NameChanged","text":"<p>Action on when company name changes.</p> <p>Declaration</p> <pre><code>public event Action NameChanged;\n</code></pre> Type Description Action NameChanged event action"},{"location":"reference/VoxelTycoon/Company/#methods","title":"Methods","text":""},{"location":"reference/VoxelTycoon/Company/#addmoneydouble-budgetitem-bool","title":"AddMoney(double, BudgetItem, bool)","text":"<p>Adds money to the company.</p> <p>If <code>value</code> is negative takes money away from the company.</p> <p>Declaration</p> <pre><code>public void AddMoney(double value, BudgetItem budgetItem, bool important = true)\n</code></pre> <p>Parameters</p> Type Name Description double value How much money to add BudgetItem budgetItem Category of the income bool important (?)"},{"location":"reference/VoxelTycoon/Company/#addrunningcostsdouble-budgetitem","title":"AddRunningCosts(double, BudgetItem)","text":"<p>Adds running costs to the specified category.</p> <p>Declaration</p> <pre><code>public void AddRunningCosts(double value, BudgetItem budgetItem)\n</code></pre> <p>Parameters</p> Type Name Description double value How much money to add to the running costs BudgetItem budgetItem Category of the costs"},{"location":"reference/VoxelTycoon/Company/#borrowint","title":"Borrow(int)","text":"<p>Takes a loan.</p> <p>Declaration</p> <pre><code>public void Borrow(int count)\n</code></pre> <p>Parameters</p> Type Name Description int count Amount of loans to take"},{"location":"reference/VoxelTycoon/Company/#canborrowint","title":"CanBorrow(int)","text":"<p>Gets whether the company can take a loan.</p> <p>Declaration</p> <pre><code>public bool CanBorrow(int count)\n</code></pre> <p>Parameters</p> Type Name Description int count How many loans company wants to take <p>Returns</p> Type Description bool Whether the company can take that much loans"},{"location":"reference/VoxelTycoon/Company/#canrepayint","title":"CanRepay(int)","text":"<p>Gets whether the company can take a loan.</p> <p>Declaration</p> <pre><code>public bool CanRepay(int count)\n</code></pre> <p>Parameters</p> Type Name Description int count How many loans company wants to return <p>Returns</p> Type Description bool Whether the company can repay that much loans"},{"location":"reference/VoxelTycoon/Company/#hasenoughmoneydouble","title":"HasEnoughMoney(double)","text":"<p>Gets whether the company can afford something.</p> <p>Declaration</p> <pre><code>public bool HasEnoughMoney(double price)\n</code></pre> <p>Parameters</p> Type Name Description double price How much company wants to spend <p>Returns</p> Type Description bool Whether the company can spend that much money"},{"location":"reference/VoxelTycoon/Company/#initializeloanint-int-double-double","title":"InitializeLoan(int, int, double, double)","text":"<p>Initializes loans for company.</p> <p>Declaration</p> <pre><code>public void InitializeLoan(int loanCount, int extraLoanCount, double loanStep, double loanInterest)\n</code></pre> <p>Parameters</p> Type Name Description int loanCount Amount of loans int extraLoanCount Additional available loans double loanStep Money given/taken each step double loanInterest Interest of the loan"},{"location":"reference/VoxelTycoon/Company/#repayint","title":"Repay(int)","text":"<p>Repays loans.</p> <p>Declaration</p> <pre><code>public void Repay(int count)\n</code></pre> <p>Parameters</p> Type Name Description int count Amount of loans to repay"},{"location":"reference/VoxelTycoon/Item/","title":"Class Item","text":"<p>Represents an item</p> <p>Namespace: <code>VoxelTycoon</code></p>"},{"location":"reference/VoxelTycoon/Item/#constructors","title":"Constructors","text":""},{"location":"reference/VoxelTycoon/Item/#item","title":"Item()","text":"<p>Creates new item with default values.</p> <p>Declaration</p> <pre><code>public Item()\n</code></pre>"},{"location":"reference/VoxelTycoon/Item/#properties","title":"Properties","text":""},{"location":"reference/VoxelTycoon/Item/#assetid","title":"AssetId","text":"<p>The item asset's ID.</p> <p>Declaration</p> <pre><code>public int AssetId { get; set; }\n</code></pre> Type Description int ID of the item"},{"location":"reference/VoxelTycoon/Item/#asseturi","title":"AssetUri","text":"<p>The item asset's URI.</p> <p>Declaration</p> <pre><code>public string AssetUri { get; set; }\n</code></pre> Type Description string URI string of the item"},{"location":"reference/VoxelTycoon/Item/#color","title":"Color","text":"<p>The color of the item.</p> <p>Declaration</p> <pre><code>public Color Color { get; set; }\n</code></pre> Type Description Color Item color"},{"location":"reference/VoxelTycoon/Item/#conveyorlength","title":"ConveyorLength","text":"<p>Probably represents the length of the item on a conveyor belt.</p> <p>Declaration</p> <pre><code>public float ConveyorLength { get; set; }\n</code></pre> Type Description float Length of the item"},{"location":"reference/VoxelTycoon/Item/#displayname","title":"DisplayName","text":"<p>Item's display name.</p> <p>Declaration</p> <pre><code>public DisplayString DisplayName { get; set; }\n</code></pre> Type Description DisplayString String (and optional format) representing the item's name"},{"location":"reference/VoxelTycoon/Item/#isliquid","title":"IsLiquid","text":"<p>Indicates is the item is a liquid.</p> <p>Declaration</p> <pre><code>public bool IsLiquid { get; set; }\n</code></pre> Type Description bool Is true if the item is liquid"},{"location":"reference/VoxelTycoon/Item/#mesh","title":"Mesh","text":"<p>3D model of the item.</p> <p>Declaration</p> <pre><code>public Mesh Mesh { get; set; }\n</code></pre> Type Description Mesh Mesh of the item"},{"location":"reference/VoxelTycoon/Item/#weight","title":"Weight","text":"<p>Weight of the item.</p> <p>Declaration</p> <pre><code>public float Weight { get; set; }\n</code></pre> Type Description float Item's weight"},{"location":"reference/VoxelTycoon/Region/","title":"Class Region","text":"<p>Represents a region</p> <p>Namespace: <code>VoxelTycoon</code></p>"},{"location":"reference/VoxelTycoon/Region/#constructors","title":"Constructors","text":""},{"location":"reference/VoxelTycoon/Region/#regionint-xz-xz-xz-int-int","title":"Region(int, Xz, Xz, Xz, int, int)","text":"<p>Creates a new region.</p> <p>Declaration</p> <pre><code>public Region(int id, Xz minIndex, Xz maxIndex, Xz center, int tier, int subregionSize)\n</code></pre> Type Name Description int id Region's ID Xz minIndex Minimum index Xz maxIndex Maximum index Xz center Center of the region int tier Tier of the region int subregionSize Size of the region"},{"location":"reference/VoxelTycoon/Region/#regionstatebinaryreader","title":"Region(StateBinaryReader)","text":"<p>Creates a new region from provided binary reader.</p> <p>Declaration</p> <pre><code>public Region(StateBinaryReader reader)\n</code></pre> Type Name Description StateBinaryReader reader Reader with region values"},{"location":"reference/VoxelTycoon/Region/#properties","title":"Properties","text":""},{"location":"reference/VoxelTycoon/Region/#area","title":"Area","text":"<p>Represents the region's area.</p> <p>Declaration</p> <pre><code>public HashSet&lt;Xz&gt; Area { get; }\n</code></pre> Type Description HashSet&lt;Xz&gt; List of Xzs included in the region"},{"location":"reference/VoxelTycoon/Region/#biome","title":"Biome","text":"<p>Region's biome.</p> <p>Declaration</p> <pre><code>public Biome Biome { get; }\n</code></pre> Type Description Biome Region's biome"},{"location":"reference/VoxelTycoon/Region/#center","title":"Center","text":"<p>Region's center.</p> <p>Declaration</p> <pre><code>public Xz Center { get; }\n</code></pre> Type Description Xz Coordinates(Xz) of the region's center"},{"location":"reference/VoxelTycoon/Region/#cities","title":"Cities","text":"<p>Region's cities.</p> <p>Declaration</p> <pre><code>public ImmutableList&lt;Cities.City&gt; Cities { get; }\n</code></pre> Type Description ImmutableList&lt;City&gt; List of the region's cities"},{"location":"reference/VoxelTycoon/Region/#colliderpath","title":"ColliderPath","text":"<p>Region's collider path.</p> <p>Declaration</p> <pre><code>public Vector2[] ColliderPath { get; }\n</code></pre> Type Description Vector2[] List of 2D vectors representing the path"},{"location":"reference/VoxelTycoon/Region/#deposits","title":"Deposits","text":"<p>Region's deposits.</p> <p>Declaration</p> <pre><code>public ImmutableList&lt;Deposit&gt; Deposits { get; }\n</code></pre> Type Description ImmutableList&lt;Deposit&gt; List of the region's deposits"},{"location":"reference/VoxelTycoon/Region/#id","title":"Id","text":"<p>Region's ID.</p> <p>Declaration</p> <pre><code>public int Id { get; }\n</code></pre> Type Description int Region's ID"},{"location":"reference/VoxelTycoon/Region/#maxindex","title":"MaxIndex","text":"<p>Region's max index.</p> <p>Declaration</p> <pre><code>public Xz MaxIndex { get; }\n</code></pre> Type Description Xz Region's max index"},{"location":"reference/VoxelTycoon/Region/#minindex","title":"MinIndex","text":"<p>Region's min index.</p> <p>Declaration</p> <pre><code>public Xz MinIndex { get; }\n</code></pre> Type Description Xz Region's min index"},{"location":"reference/VoxelTycoon/Region/#name","title":"Name","text":"<p>Region's name.</p> <p>Declaration</p> <pre><code>public string Name { get; set; }\n</code></pre> Type Description string Region's name"},{"location":"reference/VoxelTycoon/Region/#price","title":"Price","text":"<p>Region's price.</p> <p>Declaration</p> <pre><code>public double Price { get; }\n</code></pre> Type Description double Region's price"},{"location":"reference/VoxelTycoon/Region/#state","title":"State","text":"<p>Current state of the region.</p> <p>Declaration</p> <pre><code>public RegionState State { get; }\n</code></pre> Type Description RegionState Region's state"},{"location":"reference/VoxelTycoon/Region/#subregions","title":"Subregions","text":"<p>Sub regions of the region.</p> <p>Declaration</p> <pre><code>public List&lt;Xz&gt; Subregions { get; }\n</code></pre> Type Description List&lt;Xz&gt; List of the sub regions"},{"location":"reference/VoxelTycoon/Region/#tier","title":"Tier","text":"<p>Region's tier.</p> <p>Declaration</p> <pre><code>public int Tier { get; }\n</code></pre> Type Description int Region's tier"},{"location":"reference/VoxelTycoon/Region/#methods","title":"Methods","text":""},{"location":"reference/VoxelTycoon/Region/#getdistancexz","title":"GetDistance(Xz)","text":"<p>Gets the distance beween ?.</p> <p>Declaration</p> <pre><code>public int GetDistance(Xz regionIndex)\n</code></pre> <p>Parameters</p> Type Name Description int regionIndex ?"},{"location":"reference/VoxelTycoon/Region/#invalidateborderopacity","title":"InvalidateBorderOpacity()","text":"<p>Invalidates the region's border opacity.</p> <p>Declaration</p> <pre><code>public void InvalidateBorderOpacity()\n</code></pre>"},{"location":"reference/VoxelTycoon/Region/#invalidatebordervisibility","title":"InvalidateBorderVisibility()","text":"<p>Invalidates the region's border visibility.</p> <p>Declaration</p> <pre><code>public void InvalidateBorderVisibility()\n</code></pre>"},{"location":"reference/VoxelTycoon/Region/#ondrawgizmos","title":"OnDrawGizmos()","text":"<p>Probably called when gizmos is drawn.</p> <p>Declaration</p> <pre><code>public void OnDrawGizmos()\n</code></pre>"},{"location":"reference/VoxelTycoon/Region/#registerdepositdeposit","title":"RegisterDeposit(Deposit)","text":"<p>Registers a deposit in the region.</p> <p>Declaration</p> <pre><code>public void RegisterDeposit(Deposit deposit)\n</code></pre> <p>Parameters</p> Type Name Description Deposit deposit Deposit to register"},{"location":"reference/VoxelTycoon/Region/#setstateregionstate","title":"SetState(RegionState)","text":"<p>Sets the region's state.</p> <p>Declaration</p> <pre><code>public void SetState(RegionState state)\n</code></pre> <p>Parameters</p> Type Name Description RegionState state Region state to be set on the region"},{"location":"reference/VoxelTycoon/Region/#unregisterdepositdeposit","title":"UnregisterDeposit(Deposit)","text":"<p>Unregisters a deposit in the region.</p> <p>Declaration</p> <pre><code>public void UnregisterDeposit(Deposit deposit)\n</code></pre> <p>Parameters</p> Type Name Description Deposit deposit Deposit to unregister"},{"location":"reference/VoxelTycoon/Region/#writestatebinarywriter","title":"Write(StateBinaryWriter)","text":"<p>Probably writes the region's values.</p> <p>Declaration</p> <pre><code>public void Write(StateBinaryWriter writer)\n</code></pre> Type Name Description StateBinaryWriter writer Writer with region values"},{"location":"reference/VoxelTycoon/RegionState/","title":"Enum RegionState","text":"<p>Represents a regionstate</p> <p>Namespace: <code>VoxelTycoon</code></p>"},{"location":"reference/VoxelTycoon/RegionState/#values","title":"Values","text":"Name Description Visible The region is visible Unlocked The region is unlocked Hidden The region is hidden"},{"location":"reference/VoxelTycoon/Xz/","title":"Struct Xz","text":"<p>Represents a 2D coordinate.</p> <p>Namespace: <code>VoxelTycoon</code></p>"},{"location":"reference/VoxelTycoon/Xz/#constructors","title":"Constructors","text":""},{"location":"reference/VoxelTycoon/Xz/#xzint","title":"Xz(int)","text":"<p>Creates a new Xz from an integer. X and Z members are set to the integer.</p> <p>Declaration</p> <pre><code>public Xz(int xz)\n</code></pre> Type Name Description int xz Value given to X and Z"},{"location":"reference/VoxelTycoon/Xz/#xzint-int","title":"Xz(int, int)","text":"<p>Creates a new Xz from two integers representing X and Z.</p> <p>Declaration</p> <pre><code>public Xz(int x, int z)\n</code></pre> Type Name Description int x X coordinate int z Z coordinate"},{"location":"reference/VoxelTycoon/Xz/#xzvector3","title":"Xz(Vector3)","text":"<p>Creates a new Xz from a 3D vector. Only the x and z coordinates are used.</p> <p>Declaration</p> <pre><code>public Xz(Vector3 vector3)\n</code></pre> Type Name Description Vector3 vector3 vector3.x is given to X and vector3.z to Z"},{"location":"reference/VoxelTycoon/Xz/#members","title":"Members","text":""},{"location":"reference/VoxelTycoon/Xz/#x","title":"X","text":"<p>X coordinate.</p> <p>Declaration</p> <pre><code>public int X\n</code></pre> Type Description int X coordinate"},{"location":"reference/VoxelTycoon/Xz/#z","title":"Z","text":"<p>Z coordinate.</p> <p>Declaration</p> <pre><code>public int Z\n</code></pre> Type Description int Z coordinate"},{"location":"reference/VoxelTycoon/Xz/#properties","title":"Properties","text":""},{"location":"reference/VoxelTycoon/Xz/#forward","title":"Forward","text":"<p>Xz forward instance, equivalent to Xz(0, 1).</p> <p>Declaration</p> <pre><code>public static Xz Forward { get; }\n</code></pre> Type Description Xz Xz(0, 1)"},{"location":"reference/VoxelTycoon/Xz/#right","title":"Right","text":"<p>Xz right instance, equivalent to Xz(1, 0).</p> <p>Declaration</p> <pre><code>public static Xz Right { get; }\n</code></pre> Type Description Xz Xz(1, 0)"},{"location":"reference/VoxelTycoon/Xz/#one","title":"One","text":"<p>Xz one instance, equivalent to Xz(1, 1).</p> <p>Declaration</p> <pre><code>public static Xz One { get; }\n</code></pre> Type Description Xz Xz(1, 1)"},{"location":"reference/VoxelTycoon/Xz/#zero","title":"Zero","text":"<p>Xz zero instance, equivalent to Xz(0, 0).</p> <p>Declaration</p> <pre><code>public static Xz Zero { get; }\n</code></pre> Type Description Xz Xz(0, 0)"},{"location":"reference/VoxelTycoon/Xz/#volume","title":"Volume","text":"<p>Xz's volume, obtained by multiplying X and Z members.</p> <p>Declaration</p> <pre><code>public int Volume { get; }\n</code></pre> Type Description int Equals X*Z"},{"location":"reference/VoxelTycoon/Xz/#thisint","title":"this[int]","text":"<p>Gets or sets the X and Z coordinates depending on the given value and index.</p> <p>Declaration</p> <pre><code>public int this[int i] { get; set; }\n</code></pre> <p>Parameters</p> Type Name Description int i X corresponds to i=0 and Z to i=1 <p>Returns</p> Type Description int X or Z depending on i's value"},{"location":"reference/VoxelTycoon/Xz/#methods","title":"Methods","text":""},{"location":"reference/VoxelTycoon/Xz/#abs","title":"Abs()","text":"<p>Gets the absolute version of the Xz, equivalent to Xz(abs(x), abs(z)).</p> <p>Declaration</p> <pre><code>public Xz Abs()\n</code></pre> Type Description Xz Xz(abs(x), abs(z))z"},{"location":"reference/VoxelTycoon/Xz/#deconstructint-int","title":"Deconstruct(int, int)","text":"<p>Deconstructs the Xz. Returns x and z values.</p> <p>Declaration</p> <pre><code>public void Deconstruct(out int x, out int z)\n</code></pre> Type Name Description out int x X coordinate out int z Z coordinate"},{"location":"reference/VoxelTycoon/Xz/#distancexz-xz","title":"Distance(Xz, Xz)","text":"<p>Returns the distance between two Xz.</p> <p>Declaration</p> <pre><code>public static float Distance(Xz xz1, Xz xz2)\n</code></pre> <p>Parameters</p> Type Name Description Xz xz1 First Xz Xz xz2 Second Xz <p>Returns</p> Type Description float Distance between xz1 and xz2"},{"location":"reference/VoxelTycoon/Xz/#distancemanhattanxz-xz","title":"DistanceManhattan(Xz, Xz)","text":"<p>Returns the manhattan (taxicab) distance between two Xz.</p> <p>Declaration</p> <pre><code>public static float DistanceManhattan(Xz xz1, Xz xz2)\n</code></pre> <p>Parameters</p> Type Name Description Xz xz1 First Xz Xz xz2 Second Xz <p>Returns</p> Type Description float Manhattan distance between xz1 and xz2"},{"location":"reference/VoxelTycoon/Xz/#equalsobject","title":"Equals(object)","text":"<p>Tests if the Xz is equals to the object. They are equal if they are both Xz and their coordinates are equal.</p> <p>Declaration</p> <pre><code>public override bool Equals(object obj)\n</code></pre> <p>Parameters</p> Type Name Description object obj Object to compare the Xz with <p>Returns</p> Type Description bool Returns true if obj is equals to the Xz"},{"location":"reference/VoxelTycoon/Xz/#equalsxz","title":"Equals(Xz)","text":"<p>Tests if two Xz are equals. Two Xzs are equal if their X and Z coordinates are equal.</p> <p>Declaration</p> <pre><code>public bool Equals(Xz other)\n</code></pre> <p>Parameters</p> Type Name Description Xz other Xz to compare with <p>Returns</p> Type Description bool Returns true if the two Xz are equal"},{"location":"reference/VoxelTycoon/Xz/#gethashcode","title":"GetHashCode()","text":"<p>Returns the hash code of the Xz.</p> <p>Declaration</p> <pre><code>public override int GetHashCode()\n</code></pre> <p>Returns</p> Type Description int Value of the hash code"},{"location":"reference/VoxelTycoon/Xz/#max","title":"Max()","text":"<p>Returns the max of the coordinates of the Xz.</p> <p>Declaration</p> <pre><code>public int Max()\n</code></pre> <p>Returns</p> Type Description int Max between X and Z"},{"location":"reference/VoxelTycoon/Xz/#min","title":"Min()","text":"<p>Returns the min of the coordinates of the Xz.</p> <p>Declaration</p> <pre><code>public int Min()\n</code></pre> <p>Returns</p> Type Description int Min between X and Z"},{"location":"reference/VoxelTycoon/Xz/#maxxz-xz","title":"Max(Xz, Xz)","text":"<p>Returns a new Xz with the maximum of the coordinates between the two Xzs.</p> <p>Declaration</p> <pre><code>public static Xz Max(Xz xz1, Xz xz2)\n</code></pre> <p>Parameters</p> Type Name Description Xz xz1 First Xz Xz xz2 Second Xz <p>Returns</p> Type Description Xz Max Xz between xz1 and xz2"},{"location":"reference/VoxelTycoon/Xz/#minxz-xz","title":"Min(Xz, Xz)","text":"<p>Returns a new Xz with the minimum of the coordinates between the two Xzs.</p> <p>Declaration</p> <pre><code>public static Xz Min(Xz xz1, Xz xz2)\n</code></pre> <p>Parameters</p> Type Name Description Xz xz1 First Xz Xz xz2 Second Xz <p>Returns</p> Type Description Xz Min Xz between xz1 and xz2"},{"location":"reference/VoxelTycoon/Xz/#rotatebuildingrotation-xz","title":"Rotate(BuildingRotation, Xz)","text":"<p>Rotate and translates a Xz.</p> <p>Declaration</p> <pre><code>public Xz Rotate(BuildingRotation rotation, Xz translation = null)\n</code></pre> <p>Parameters</p> Type Name Description BuildingRotation rotation Rotation to apply to the Xz Xz translation Optional translation to apply to the Xz <p>Returns</p> Type Description Xz Rotated and translated version of the Xz"},{"location":"reference/VoxelTycoon/Xz/#squareddistancexz-xz","title":"SquaredDistance(Xz, Xz)","text":"<p>Returns the squared distance between two Xz.</p> <p>Declaration</p> <pre><code>public static int SquaredDistance(Xz xz1, Xz xz2)\n</code></pre> <p>Parameters</p> Type Name Description Xz xz1 First Xz Xz xz2 Second Xz <p>Returns</p> Type Description int Squared distance between xz1 and xz2"},{"location":"reference/VoxelTycoon/Xz/#tostring","title":"ToString()","text":"<p>Returns a string representing the Xz.</p> <p>Declaration</p> <pre><code>public override string ToString()\n</code></pre> <p>Returns</p> Type Description string String representing the Xz"},{"location":"reference/VoxelTycoon/Xz/#operators","title":"Operators","text":""},{"location":"reference/VoxelTycoon/Xz/#xz-xz","title":"+(Xz, Xz)","text":"<p>Returns the sum of two Xz which is calculated by the sum of each coordinates.</p> <p>Declaration</p> <pre><code>public static Xz operator +(Xz xz, Xz xz2)\n</code></pre> <p>Parameters</p> Type Name Description Xz xz First Xz Xz xz2 Second Xz <p>Returns</p> Type Description Xz Sum of xz and xz2"},{"location":"reference/VoxelTycoon/Xz/#-xz-xz","title":"-(Xz, Xz)","text":"<p>Returns the substraction of two Xz which is calculated by the substraction of each coordinates.</p> <p>Declaration</p> <pre><code>public static Xz operator -(Xz xz, Xz xz2)\n</code></pre> <p>Parameters</p> Type Name Description Xz xz First Xz Xz xz2 Second Xz <p>Returns</p> Type Description Xz Substraction of xz and xz2"},{"location":"reference/VoxelTycoon/Xz/#xz-xz_1","title":"*(Xz, Xz)","text":"<p>Returns the multiplication of two Xz which is calculated by the multiplication of each coordinates.</p> <p>Declaration</p> <pre><code>public static Xz operator *(Xz xz1, Xz xz2)\n</code></pre> <p>Parameters</p> Type Name Description Xz xz1 First Xz Xz xz2 Second Xz <p>Returns</p> Type Description Xz Multiplication of xz1 and xz2"},{"location":"reference/VoxelTycoon/Xz/#xz-xz_2","title":"/(Xz, Xz)","text":"<p>Returns the division of two Xz which is calculated by the division of each coordinates.</p> <p>Declaration</p> <pre><code>public static Xz operator /(Xz xz1, Xz xz2)\n</code></pre> <p>Parameters</p> Type Name Description Xz xz1 First Xz Xz xz2 Second Xz <p>Returns</p> Type Description Xz Division of xz1 and xz2"},{"location":"reference/VoxelTycoon/Xz/#xz-int","title":"*(Xz, int)","text":"<p>Returns the multiplication between an integer and a Xz. The result is calculated by multiplying each Xz coordinate by the integer.</p> <p>Declaration</p> <pre><code>public static Xz operator *(Xz xz, int a)\n</code></pre> <p>Parameters</p> Type Name Description Xz xz Xz to multiply int a Integer to multiply <p>Returns</p> Type Description Xz Multiplication of xz by a"},{"location":"reference/VoxelTycoon/Xz/#xz-int_1","title":"/(Xz, int)","text":"<p>Returns the division of a Xz by an integer. The result is calculated by dividing each Xz coordinate by the integer.</p> <p>Declaration</p> <pre><code>public static Xz operator /(Xz xz, int a)\n</code></pre> <p>Parameters</p> Type Name Description Xz xz Divendent int a Divider <p>Returns</p> Type Description Xz Division of xz by a"},{"location":"reference/VoxelTycoon/Xz/#xz-float","title":"/(Xz, float)","text":"<p>Returns the division of Xz by a float in a Vector3. The result is calculated by dividing each Xz coordinate by the float. The Y coordinate is set to 0.</p> <p>Declaration</p> <pre><code>public static Vector3 operator /(Xz xz, float a)\n</code></pre> <p>Parameters</p> Type Name Description Xz xz Divendent float a Divider <p>Returns</p> Type Description Vector3 Contains the division of xz by a"},{"location":"reference/VoxelTycoon/Xz/#-xz","title":"-(Xz)","text":"<p>Returns the opposite of the Xz which is calculated by getting the opposite of each coordinate.</p> <p>Declaration</p> <pre><code>public static Xz operator -(Xz xz)\n</code></pre> <p>Parameters</p> Type Name Description Xz xz Xz provided <p>Returns</p> Type Description Xz Opposite of xz"},{"location":"reference/VoxelTycoon/Xz/#vector2xz","title":"Vector2(Xz)","text":"<p>Returns a Vector2 from a Xz.</p> <p>Declaration</p> <pre><code>public static implicit operator Vector2(Xz xz)\n</code></pre> <p>Parameters</p> Type Name Description Xz xz Xz provided <p>Returns</p> Type Description Vector2 Contains xz's coordinates in its X and Y coordinates"},{"location":"reference/VoxelTycoon/Xz/#vector3xz","title":"Vector3(Xz)","text":"<p>Returns a Vector3 from a Xz. The Y coordinate is set to 0.</p> <p>Declaration</p> <pre><code>public static explicit operator Vector3(Xz xz)\n</code></pre> <p>Parameters</p> Type Name Description Xz xz Xz provided <p>Returns</p> Type Description Vector3 Contains xz's coordinates in its X and Z coordinates"},{"location":"reference/VoxelTycoon/Xz/#xyzxz","title":"Xyz(Xz)","text":"<p>Returns a Xyz with a Xz's coordinates. The Y coordinate is set to 0.</p> <p>Declaration</p> <pre><code>public static explicit operator Xyz(Xz xz)\n</code></pre> <p>Parameters</p> Type Name Description Xz xz Xz provided <p>Returns</p> Type Description Xyz Contains xz's coordinates in its X and Z coordinates"},{"location":"reference/VoxelTycoon/Xz/#xzxyz","title":"Xz(Xyz)","text":"<p>Returns a Xz with a Xyz's coordinates. The Y coordinate is not kept.</p> <p>Declaration</p> <pre><code>public static explicit operator Xyz(Xz xz)\n</code></pre> <p>Parameters</p> Type Name Description Xyz xyz Xyz provided <p>Returns</p> Type Description Xz Contains xyz's X and Z coordinates"},{"location":"reference/VoxelTycoon/Xz/#xz-xz_3","title":"==(Xz, Xz)","text":"<p>Returns true if the two provided Xzs are equal.</p> <p>Declaration</p> <pre><code>public static bool operator ==(Xz a, Xz b)\n</code></pre> <p>Parameters</p> Type Name Description Xz a First Xz Xz b Second Xz <p>Returns</p> Type Description bool True if a and b are equal"},{"location":"reference/VoxelTycoon/Xz/#xz-xz_4","title":"!=(Xz, Xz)","text":"<p>Returns false if the two provided Xzs are equal.</p> <p>Declaration</p> <pre><code>public static bool operator !=(Xz a, Xz b)\n</code></pre> <p>Parameters</p> Type Name Description Xz a First Xz Xz b Second Xz <p>Returns</p> Type Description bool False if a and b are equal"},{"location":"reference/VoxelTycoon/Modding/Mod/","title":"Abstract Class Mod","text":"<p>Represents a script mod</p> <p>Namespace: <code>VoxelTycoon.Modding</code></p>"},{"location":"reference/VoxelTycoon/Modding/Mod/#constructors","title":"Constructors","text":"<p>This class is abstract (must have implementation, can only be inherited)</p> <pre><code>public abstract class Mod\n</code></pre>"},{"location":"reference/VoxelTycoon/Modding/Mod/#methods","title":"Methods","text":""},{"location":"reference/VoxelTycoon/Modding/Mod/#deinitialize","title":"Deinitialize()","text":"<p>Called when deinitializing a mod</p> <p>Declaration</p> <pre><code>protected internal virtual void Deinitialize()\n</code></pre>"},{"location":"reference/VoxelTycoon/Modding/Mod/#initialize","title":"Initialize()","text":"<p>Called when initializing a mod</p> <p>Declaration</p> <pre><code>protected internal virtual void Initialize()\n</code></pre>"},{"location":"reference/VoxelTycoon/Modding/Mod/#ongamestarted","title":"OnGameStarted()","text":"<p>Called when game started (loaded)</p> <p>Declaration</p> <pre><code>protected internal virtual void OnGameStarted()\n</code></pre>"},{"location":"reference/VoxelTycoon/Modding/Mod/#ongamestarting","title":"OnGameStarting()","text":"<p>Called when game is starting (loading)</p> <p>Declaration</p> <pre><code>protected internal virtual void OnGameStarting()\n</code></pre>"},{"location":"reference/VoxelTycoon/Modding/Mod/#onlateupdate","title":"OnLateUpdate()","text":"<p>Called with Unity's OnLateUpdate</p> <p>Declaration</p> <pre><code>protected internal virtual void OnLateUpdate()\n</code></pre>"},{"location":"reference/VoxelTycoon/Modding/Mod/#onmodsinitialized","title":"OnModsInitialized()","text":"<p>Called when all mods have been initialized</p> <p>Declaration</p> <pre><code>protected internal virtual void OnModsInitialized()\n</code></pre>"},{"location":"reference/VoxelTycoon/Modding/Mod/#onupdate","title":"OnUpdate()","text":"<p>Called with Unity's OnUpdate</p> <p>Declaration</p> <pre><code>protected internal virtual void OnUpdate()\n</code></pre>"},{"location":"reference/VoxelTycoon/Modding/Mod/#readstatebinaryreader","title":"Read(StateBinaryReader)","text":"<p>Called when loading a game. Allows a mod to load data from the save file.</p> <p>Declaration</p> <pre><code>protected internal virtual void Read(StateBinaryReader reader)\n</code></pre> <p>Parameters</p> Type Name Description StateBinaryReader reader Used to load the data"},{"location":"reference/VoxelTycoon/Modding/Mod/#writestatebinarywriter","title":"Write(StateBinaryWriter)","text":"<p>Called when saving a game. Allows a mod to store data from the save file.</p> <p>Declaration</p> <pre><code>protected internal virtual void Write(StateBinaryWriter writer)\n</code></pre> <p>Parameters</p> Type Name Description StateBinaryWriter writer Used to store the data"}]}